{"ast":null,"code":"'use strict';\n/**\r\n * Abstraction of business logic.\r\n */\n\nvar logic = {\n  url: 'http://localhost:8000/api',\n  // __userId__: null,\n  __userToken__: null,\n  __userAdmin__: null,\n  // __updateToken__(){\n  //     this.__userApiToken__ = sessionStorage.getItem('__userToken__')\n  // },\n  // removeStorage(){\n  //     sessionStorage.clear()\n  // },\n\n  /**\r\n  * Registers a user.\r\n  * \r\n  * @param {string} name \r\n  * @param {string} surname\r\n  * @param {string} surname\r\n  * @param {string} idCard\r\n  * @param {string} phone\r\n  * @param {string} adress\r\n  * @param {string} city \r\n  * @param {string} email \r\n  * @param {string} password \r\n  * @param {string} passwordConfirmation \r\n  */\n  registerUser: function registerUser(name, surname, idCard, phone, adress, city, email, password, passwordConfirmation) {\n    if (typeof name !== 'string') throw TypeError(name + ' is not a string');\n    if (!name.trim().length) throw Error('name cannot be empty');\n    if (typeof surname !== 'string') throw TypeError(surname + ' is not a string');\n    if (!surname.trim().length) throw Error('surname cannot be empty');\n    if (typeof idCard !== 'string') throw TypeError(idCard + ' is not a string');\n    if (!idCard.trim().length) throw Error('idCard cannot be empty');\n    if (typeof phone !== 'string') throw TypeError(phone + ' is not a string');\n    if (!phone.trim().length) throw Error('phone cannot be empty');\n    if (typeof adress !== 'string') throw TypeError(adress + 'is not a string');\n    if (!adress.trim().length) throw Error('adress cannot be empty');\n    if (typeof city !== 'string') throw TypeError(city + 'is not a string');\n    if (!city.trim().length) throw Error('city cannot be empty');\n    if (typeof email !== 'string') throw TypeError(email + ' is not a string');\n    if (!email.trim().length) throw Error('email cannot be empty');\n    if (typeof password !== 'string') throw TypeError(password + ' is not a string');\n    if (!password.trim().length) throw Error('password cannot be empty');\n    if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string');\n    if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty');\n    if (password !== passwordConfirmation) throw Error('passwords do not match');\n    console.log(name, surname, idCard, phone, adress, city, email, password, passwordConfirmation);\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        surname: surname,\n        idCard: idCard,\n        phone: phone,\n        adress: adress,\n        city: city,\n        email: email,\n        password: password,\n        passwordConfirmation: passwordConfirmation\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (_ref) {\n      var id = _ref.id,\n          error = _ref.error;\n      if (error) throw Error(error);\n      return id;\n    });\n  },\n\n  /**\r\n  * Registers a owner's pet.\r\n  * \r\n  * @param {string} owner \r\n  * @param {string} name \r\n  * @param {string} specie\r\n  * @param {string} breed\r\n  * @param {string} color\r\n  * @param {string} gender\r\n  * @param {string} birthdate\r\n  * @param {string} microchip\r\n  * @param {string} petlicence\r\n  * @param {string} neutered\r\n  * @param {string} vaccionations\r\n  * @param {string} controls\r\n  * @param {string} details\r\n  */\n  registerPet: function registerPet(owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details) {\n    if (typeof owner !== 'string') throw TypeError(owner + ' is not a string');\n    if (!owner.trim().length) throw Error('owner cannot be empty');\n    if (typeof name !== 'string') throw TypeError(name + ' is not a string');\n    if (!name.trim().length) throw Error('name cannot be empty');\n    if (typeof specie !== 'string') throw TypeError(specie + ' is not a string');\n    if (!specie.trim().length) throw Error('specie cannot be empty');\n    if (typeof breed !== 'string') throw TypeError(breed + ' is not a string');\n    if (!breed.trim().length) throw Error('breed cannot be empty');\n    if (typeof color !== 'string') throw TypeError(color + ' is not a string');\n    if (!color.trim().length) throw Error('color cannot be empty');\n    if (typeof gender !== 'string') throw TypeError(gender + ' is not a string');\n    if (!gender.trim().length) throw Error('gender cannot be empty');\n    if (typeof birthdate != 'string') throw TypeError(birthdate + 'is not a string');\n    if (!birthdate.trim().length) throw Error('birthdate cannot be empty');\n    if (typeof microchip != 'string') throw TypeError(microchip + 'is not a string');\n    if (!microchip.trim().length) throw Error('microchip cannot be empty');\n    if (typeof petlicence != 'string') throw TypeError(petlicence + 'is not a string');\n    if (!microchip.trim().length) throw Error('microchip cannot be empty');\n    if (typeof vaccionations != 'string') throw TypeError(vaccionations + 'is not a string'); // if (!vaccionations.trim().length) throw Error ('vaccionations cannot be empty')\n\n    if (typeof neutered != 'string') throw TypeError(neutered + 'is not a string'); // if (!neutered.trim().length) throw Error ('neutered cannot be empty')\n\n    if (typeof controls != 'string') throw TypeError(controls + 'is not a string'); // if (!controls.trim().length) throw Error ('controls cannot be empty')\n\n    if (typeof details != 'string') throw TypeError(details + 'is not a string');\n    if (!details.trim().length) throw Error('details cannot be empty');\n    console.log(owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details);\n    debugger;\n    return fetch(\"\".concat(this.url, \"/pet\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        owner: owner,\n        name: name,\n        specie: specie,\n        breed: breed,\n        color: color,\n        gender: gender,\n        birthdate: birthdate,\n        microchip: microchip,\n        petlicence: petlicence,\n        neutered: neutered,\n        vaccionations: vaccionations,\n        controls: controls,\n        details: details\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (_ref2) {\n      var id = _ref2.id,\n          error = _ref2.error;\n      if (error) throw Error(error);\n      return id;\n    });\n  },\n\n  /**\r\n   * Logs in the user by its credentials.\r\n   * \r\n   * @param {string} email \r\n   * @param {string} password \r\n   */\n  logInUser: function logInUser(email, password) {\n    var _this = this;\n\n    if (typeof email !== 'string') throw TypeError(email + ' is not a string');\n    if (!email.trim().length) throw Error('email cannot be empty');\n    if (typeof password !== 'string') throw TypeError(password + ' is not a string');\n    if (!password.trim().length) throw Error('password cannot be empty');\n    return fetch(\"\".concat(this.url, \"/user/auth\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      _this.__userToken__ = response.token;\n      _this.__userAdmin__ = response.role === 'admin'; //return response.token\n    });\n  },\n\n  /**\r\n   * Checks user is logged in.\r\n   */\n  get isUserLoggedIn() {\n    return !!this.__userId__;\n  },\n\n  /**\r\n   * Logs out the user.\r\n   */\n  logOutUser: function logOutUser() {\n    this.__userId__ = null;\n    this.__userApiToken__ = null; // this.removeStorage()\n  },\n\n  get isAdmin() {\n    return this.__userAdmin__;\n  },\n\n  retrieveUsers: function retrieveUsers() {\n    // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n    // if (!token.trim().length) throw Error('token is empty')\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/users\"), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userApiToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  retrieveAppointments: function retrieveAppointments() {\n    // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n    // if (!token.trim().length) throw Error('token is empty')\n    // this.__updateToken__()\n    return fetch(\"\".concat(this.url, \"/appointments\"), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userApiToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  retrievePets: function retrievePets(userId) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/pets/\").concat(userId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userApiToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  assignAppointment: function assignAppointment(owner, pet, dayDb) {\n    if (typeof owner !== 'string') throw TypeError(owner + ' is not a string');\n    if (!owner.trim().length) throw Error('owner cannot be empty');\n    if (typeof pet !== 'string') throw TypeError(pet + ' is not a string');\n    if (!pet.trim().length) throw Error('pet cannot be empty');\n    if (typeof dayDb !== 'string') throw TypeError(dayDb + ' is not a string');\n    if (!dayDb.trim().length) throw Error(' dayDb cannot be empty'); /////////////\n\n    console.log(owner, pet, dayDb);\n    return fetch(\"\".concat(this.url, \"/appointment\"), {\n      method: 'POST',\n      headers: {\n        // authorization: `Bearer ${this.__userApiToken__}`\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        owner: owner,\n        pet: pet,\n        dayDb: dayDb\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  deleteAppointment: function deleteAppointment(appointmentId) {\n    if (typeof appointmentId !== 'string') throw TypeError(appointmentId + ' is not a string');\n    if (!appointmentId.trim().length) throw Error('appointmentId cannot be empty');\n    console.log(appointmentId);\n    return fetch(\"\".concat(this.url, \"/appointment\"), {\n      method: 'DELETE',\n      headers: {\n        // authorization: `Bearer ${this.__userApiToken__}`\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        appointmentId: appointmentId\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  retrieveUser: function retrieveUser(userId) {\n    // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n    // if (!token.trim().length) throw Error('token is empty')\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/user/\").concat(userId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userApiToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  retrievePet: function retrievePet(petsId) {\n    // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n    // if (!token.trim().length) throw Error('token is empty')\n    // this.__updateToken__()\n    // return fetch(`${this.url}/user`, {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/pet/\").concat(petsId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userApiToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  retrievePetVisit: function retrievePetVisit(petsId) {\n    // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n    // if (!token.trim().length) throw Error('token is empty')\n    // this.__updateToken__()\n    // return fetch(`${this.url}/user`, {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/visit/\").concat(petsId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userApiToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  updateUser: function updateUser(name, surname, idCard, phone, adress, city, email) {\n    // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n    // if (!token.trim().length) throw Error('token is empty')\n    // if (data.constructor !== Object) throw TypeError(`${data} is not an object`)\n    debugger;\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userApiToken__),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        surname: surname,\n        idCard: idCard,\n        phone: phone,\n        adress: adress,\n        city: city,\n        email: email\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n  * Updates a pet.\r\n  * \r\n  * @param {string} token\r\n  * @param {string} data\r\n  * \r\n  */\n  updatePet: function updatePet(petsId, name, microchip, petlicence) {\n    // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n    // if (!token.trim().length) throw Error('token is empty')\n    // if (data.constructor !== Object) throw TypeError(`${data} is not an object`)\n    debugger;\n    return fetch(\"\".concat(this.url, \"/pet\"), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userApiToken__),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        petsId: petsId,\n        name: name,\n        microchip: microchip,\n        petlicence: petlicence\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  updateVisit: function updateVisit(petsId, vaccionations, controls, details) {\n    // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n    // if (!token.trim().length) throw Error('token is empty')\n    // if (data.constructor !== Object) throw TypeError(`${data} is not an object`)\n    debugger;\n    return fetch(\"\".concat(this.url, \"/visit\"), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userApiToken__),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        petsId: petsId,\n        vaccionations: vaccionations,\n        controls: controls,\n        details: details\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n  * Removes an user.   ////////////////////////////////// no la faig servir\r\n  * \r\n  * @param {string} token \r\n  * @param {string} email\r\n  * @param {string} password\r\n  * \r\n  */\n  removeUser: function removeUser(token, email, password) {\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    if (!token.trim().length) throw Error('token is empty');\n    if (typeof email !== 'string') throw TypeError(\"\".concat(email, \" is not a string\"));\n    if (!email.trim().length) throw Error('email is empty');\n    if (typeof password !== 'string') throw TypeError(\"\".concat(password, \" is not a string\"));\n    if (!password.trim().length) throw Error('password is empty');\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'DELETE',\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  }\n};\nexport default logic;","map":{"version":3,"sources":["C:\\Users\\lluna\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\clara-rufi\\st-james-vet\\st-james-vet-app\\src\\logic\\index.js"],"names":["logic","url","__userToken__","__userAdmin__","registerUser","name","surname","idCard","phone","adress","city","email","password","passwordConfirmation","TypeError","trim","length","Error","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","id","error","registerPet","owner","specie","breed","color","gender","birthdate","microchip","petlicence","neutered","vaccionations","controls","details","logInUser","token","role","isUserLoggedIn","__userId__","logOutUser","__userApiToken__","isAdmin","retrieveUsers","__updateToken__","authorization","retrieveAppointments","retrievePets","userId","assignAppointment","pet","dayDb","deleteAppointment","appointmentId","retrieveUser","retrievePet","petsId","retrievePetVisit","updateUser","updatePet","updateVisit","removeUser"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\n\r\n/**\r\n * Abstraction of business logic.\r\n */\r\nconst logic = {\r\n    url: 'http://localhost:8000/api',\r\n    // __userId__: null,\r\n    __userToken__: null,\r\n    __userAdmin__: null,\r\n    // __updateToken__(){\r\n    //     this.__userApiToken__ = sessionStorage.getItem('__userToken__')\r\n    // },\r\n\r\n    // removeStorage(){\r\n    //     sessionStorage.clear()\r\n    // },\r\n    /**\r\n    * Registers a user.\r\n    * \r\n    * @param {string} name \r\n    * @param {string} surname\r\n    * @param {string} surname\r\n    * @param {string} idCard\r\n    * @param {string} phone\r\n    * @param {string} adress\r\n    * @param {string} city \r\n    * @param {string} email \r\n    * @param {string} password \r\n    * @param {string} passwordConfirmation \r\n    */\r\n    registerUser(name, surname, idCard, phone, adress, city, email, password, passwordConfirmation) {\r\n        if (typeof name !== 'string') throw TypeError(name + ' is not a string')\r\n\r\n        if (!name.trim().length) throw Error('name cannot be empty')\r\n\r\n        if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')\r\n\r\n        if (!surname.trim().length) throw Error('surname cannot be empty')\r\n\r\n        if (typeof idCard !== 'string') throw TypeError(idCard + ' is not a string')\r\n\r\n        if (!idCard.trim().length) throw Error('idCard cannot be empty')\r\n\r\n        if(typeof phone !== 'string') throw TypeError (phone + ' is not a string')\r\n\r\n        if (!phone.trim().length) throw Error ('phone cannot be empty')\r\n\r\n        if(typeof adress !== 'string') throw TypeError (adress + 'is not a string')\r\n\r\n        if (!adress.trim().length) throw Error ('adress cannot be empty')\r\n\r\n        if(typeof city !== 'string') throw TypeError (city + 'is not a string')\r\n\r\n        if (!city.trim().length) throw Error ('city cannot be empty')\r\n\r\n        if (typeof email !== 'string') throw TypeError(email + ' is not a string')\r\n\r\n        if (!email.trim().length) throw Error('email cannot be empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(password + ' is not a string')\r\n\r\n        if (!password.trim().length) throw Error('password cannot be empty')\r\n\r\n        if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')\r\n\r\n        if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')\r\n\r\n        if (password !== passwordConfirmation) throw Error('passwords do not match')\r\n\r\n        console.log(name, surname, idCard, phone, adress, city, email, password, passwordConfirmation)\r\n\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            \r\n            body: JSON.stringify({ name, surname, idCard, phone, adress, city, email, password, passwordConfirmation })\r\n        })\r\n            .then(response => response.json())\r\n            .then(({ id, error }) => {\r\n                if (error) throw Error(error)\r\n\r\n                return id\r\n            })\r\n    },\r\n\r\n    /**\r\n    * Registers a owner's pet.\r\n    * \r\n    * @param {string} owner \r\n    * @param {string} name \r\n    * @param {string} specie\r\n    * @param {string} breed\r\n    * @param {string} color\r\n    * @param {string} gender\r\n    * @param {string} birthdate\r\n    * @param {string} microchip\r\n    * @param {string} petlicence\r\n    * @param {string} neutered\r\n    * @param {string} vaccionations\r\n    * @param {string} controls\r\n    * @param {string} details\r\n    */\r\n    registerPet(owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered,vaccionations, controls, details) {\r\n        \r\n        if (typeof owner !== 'string') throw TypeError(owner + ' is not a string')\r\n\r\n        if (!owner.trim().length) throw Error('owner cannot be empty')\r\n\r\n        if (typeof name !== 'string') throw TypeError(name + ' is not a string')\r\n\r\n        if (!name.trim().length) throw Error('name cannot be empty')\r\n\r\n        if (typeof specie !== 'string') throw TypeError(specie + ' is not a string')\r\n\r\n        if (!specie.trim().length) throw Error('specie cannot be empty')\r\n\r\n        if (typeof breed !== 'string') throw TypeError(breed + ' is not a string')\r\n\r\n        if (!breed.trim().length) throw Error('breed cannot be empty')\r\n\r\n        if (typeof color !== 'string') throw TypeError(color + ' is not a string')\r\n\r\n        if (!color.trim().length) throw Error('color cannot be empty')\r\n\r\n        if (typeof gender !== 'string') throw TypeError(gender + ' is not a string')\r\n\r\n        if (!gender.trim().length) throw Error('gender cannot be empty')\r\n\r\n        if(typeof birthdate != 'string') throw TypeError (birthdate + 'is not a string')\r\n\r\n        if (!birthdate.trim().length) throw Error ('birthdate cannot be empty')\r\n\r\n        if(typeof microchip != 'string') throw TypeError (microchip + 'is not a string')\r\n\r\n        if (!microchip.trim().length) throw Error ('microchip cannot be empty')\r\n\r\n        if(typeof petlicence != 'string') throw TypeError (petlicence + 'is not a string')\r\n\r\n        if (!microchip.trim().length) throw Error ('microchip cannot be empty')\r\n\r\n        if(typeof vaccionations != 'string') throw TypeError (vaccionations + 'is not a string')\r\n\r\n        // if (!vaccionations.trim().length) throw Error ('vaccionations cannot be empty')\r\n\r\n        if(typeof neutered != 'string') throw TypeError (neutered + 'is not a string')\r\n\r\n        // if (!neutered.trim().length) throw Error ('neutered cannot be empty')\r\n\r\n        if(typeof controls != 'string') throw TypeError (controls + 'is not a string')\r\n\r\n        // if (!controls.trim().length) throw Error ('controls cannot be empty')\r\n\r\n\r\n        if(typeof details != 'string') throw TypeError (details + 'is not a string')\r\n\r\n        if (!details.trim().length) throw Error ('details cannot be empty')\r\n\r\n\r\n        console.log(owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details)\r\n       debugger\r\n        return fetch(`${this.url}/pet`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details})\r\n        })\r\n            .then(response => response.json())\r\n            .then(({ id, error }) => {\r\n                if (error) throw Error(error)\r\n        \r\n                return id\r\n            })\r\n    },\r\n   \r\n\r\n    /**\r\n     * Logs in the user by its credentials.\r\n     * \r\n     * @param {string} email \r\n     * @param {string} password \r\n     */\r\n    logInUser(email, password) {\r\n        if (typeof email !== 'string') throw TypeError(email + ' is not a string')\r\n\r\n        if (!email.trim().length) throw Error('email cannot be empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(password + ' is not a string')\r\n\r\n        if (!password.trim().length) throw Error('password cannot be empty')\r\n\r\n\r\n        return fetch(`${this.url}/user/auth`, {\r\n           \r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ email, password })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                this.__userToken__ = response.token\r\n                this.__userAdmin__ = (response.role === 'admin')\r\n                //return response.token\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Checks user is logged in.\r\n     */\r\n    get isUserLoggedIn() {\r\n        return !!this.__userId__\r\n    },\r\n\r\n    /**\r\n     * Logs out the user.\r\n     */\r\n    logOutUser() {\r\n        this.__userId__ = null\r\n        this.__userApiToken__ = null\r\n        // this.removeStorage()\r\n    },\r\n\r\n    get isAdmin() {\r\n        return this.__userAdmin__\r\n    },\r\n\r\n    retrieveUsers() {\r\n        // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        // if (!token.trim().length) throw Error('token is empty')\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/users`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userApiToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    retrieveAppointments() {\r\n        // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        // if (!token.trim().length) throw Error('token is empty')\r\n        // this.__updateToken__()\r\n        return fetch(`${this.url}/appointments`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userApiToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    retrievePets(userId){\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/pets/${userId}`, {\r\n        \r\n            headers:{\r\n                authorization: `Bearer ${this.__userApiToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    assignAppointment(owner, pet, dayDb){\r\n        if (typeof owner !== 'string') throw TypeError(owner + ' is not a string')\r\n\r\n        if (!owner.trim().length) throw Error('owner cannot be empty')\r\n\r\n        if (typeof pet !== 'string') throw TypeError(pet + ' is not a string')\r\n\r\n        if (!pet.trim().length) throw Error('pet cannot be empty')\r\n\r\n        if (typeof dayDb !== 'string') throw TypeError(dayDb + ' is not a string')\r\n\r\n        if (!dayDb.trim().length) throw Error(' dayDb cannot be empty') /////////////\r\n\r\n        console.log(owner, pet, dayDb)\r\n\r\n        \r\n        return fetch(`${this.url}/appointment`, {\r\n            method: 'POST',\r\n            headers:{\r\n                // authorization: `Bearer ${this.__userApiToken__}`\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ owner, pet, dayDb})\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    deleteAppointment(appointmentId){\r\n        if (typeof appointmentId !== 'string') throw TypeError(appointmentId + ' is not a string')\r\n\r\n        if (!appointmentId.trim().length) throw Error('appointmentId cannot be empty')\r\n\r\n        console.log(appointmentId)\r\n\r\n        \r\n        return fetch(`${this.url}/appointment`, {\r\n            method: 'DELETE',\r\n            headers:{\r\n                // authorization: `Bearer ${this.__userApiToken__}`\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ appointmentId })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    retrieveUser(userId) {\r\n        // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        // if (!token.trim().length) throw Error('token is empty')\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/user/${userId}`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userApiToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n        },\r\n        \r\n    retrievePet(petsId) {\r\n        // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        // if (!token.trim().length) throw Error('token is empty')\r\n       \r\n        // this.__updateToken__()\r\n        // return fetch(`${this.url}/user`, {\r\n\r\n         this.__updateToken__()\r\n        return fetch(`${this.url}/pet/${petsId}`, {\r\n            headers: {\r\n                authorization: `Bearer ${this.__userApiToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    retrievePetVisit(petsId) {\r\n        // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        // if (!token.trim().length) throw Error('token is empty')\r\n       \r\n        // this.__updateToken__()\r\n        // return fetch(`${this.url}/user`, {\r\n\r\n         this.__updateToken__()\r\n        return fetch(`${this.url}/visit/${petsId}`, {\r\n            headers: {\r\n                authorization: `Bearer ${this.__userApiToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n\r\n    },\r\n    \r\n    updateUser(name, surname, idCard, phone, adress, city, email) {\r\n        // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        // if (!token.trim().length) throw Error('token is empty')\r\n\r\n        // if (data.constructor !== Object) throw TypeError(`${data} is not an object`)\r\n        debugger\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userApiToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({name, surname, idCard, phone, adress, city, email})\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n    * Updates a pet.\r\n    * \r\n    * @param {string} token\r\n    * @param {string} data\r\n    * \r\n    */\r\n    updatePet(petsId, name, microchip, petlicence) {\r\n        // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        // if (!token.trim().length) throw Error('token is empty')\r\n\r\n        // if (data.constructor !== Object) throw TypeError(`${data} is not an object`)\r\n        debugger\r\n        return fetch(`${this.url}/pet`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userApiToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({petsId, name, microchip, petlicence})\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    updateVisit(petsId, vaccionations, controls, details) {\r\n        // if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        // if (!token.trim().length) throw Error('token is empty')\r\n\r\n        // if (data.constructor !== Object) throw TypeError(`${data} is not an object`)\r\n        debugger\r\n        return fetch(`${this.url}/visit`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userApiToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({petsId, vaccionations, controls, details})\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n        })\r\n    },\r\n\r\n    /**\r\n    * Removes an user.   ////////////////////////////////// no la faig servir\r\n    * \r\n    * @param {string} token \r\n    * @param {string} email\r\n    * @param {string} password\r\n    * \r\n    */\r\n    removeUser(token, email, password) {\r\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        if (!token.trim().length) throw Error('token is empty')\r\n\r\n        if (typeof email !== 'string') throw TypeError(`${email} is not a string`)\r\n        if (!email.trim().length) throw Error('email is empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\r\n        if (!password.trim().length) throw Error('password is empty')\r\n\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: `Bearer ${token}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ email, password })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport default logic"]},"metadata":{},"sourceType":"module"}