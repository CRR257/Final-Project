{"ast":null,"code":"'use strict';\n\nimport clientApi from '../clientApi';\n/**\r\n * Abstraction of business logic.\r\n */\n\nvar logic = {\n  __userApiToken__: null,\n  ///afegir validacions de camps\n\n  /**\r\n  * Registers a user.\r\n  * \r\n  * @param {string} name \r\n  * @param {string} surname \r\n  * @param {string} email \r\n  * @param {string} password \r\n  * @param {string} passwordConfirmation \r\n  */\n  registerUser: function registerUser(name, surname, id, phone, adress, city, email, password, passwordConfirmation) {\n    if (typeof name !== 'string') throw TypeError(name + ' is not a string');\n    if (!name.trim().length) throw Error('name cannot be empty');\n    if (typeof surname !== 'string') throw TypeError(surname + ' is not a string');\n    if (!surname.trim().length) throw Error('surname cannot be empty');\n    if (typeof id !== 'string') throw TypeError(id + ' is not a string');\n    if (!id.trim().length) throw Error('id cannot be empty');\n    if (typeof phone !== 'string') throw TypeError(phone + ' is not a string');\n    if (!phone.trim().length) throw Error('phone cannot be empty');\n    if (typeof adress !== 'string') throw TypeError(adress + 'is not a string');\n    if (!adress.trim().length) throw Error('adress cannot be empty');\n    if (typeof city !== 'string') throw TypeError(city + 'is not a string');\n    if (!city.trim().length) throw Error('city cannot be empty');\n    if (typeof email !== 'string') throw TypeError(email + ' is not a string');\n    if (!email.trim().length) throw Error('email cannot be empty');\n    if (typeof password !== 'string') throw TypeError(password + ' is not a string');\n    if (!password.trim().length) throw Error('password cannot be empty');\n    if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string');\n    if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty');\n    if (password !== passwordConfirmation) throw Error('passwords do not match');\n    console.log(name, surname, id, phone, adress, city, email, password, passwordConfirmation); // return fetch(`${this.url}/user`, {\n    //     method: 'POST',\n    //     headers: {\n    //         'content-type': 'application/json'\n    //     },\n    //     body: JSON.stringify({ name, surname, id, phone, adress, city, email, password, passwordConfirmation })\n    // })\n    //     .then(response => response.json())\n    //     .then(({ id, error }) => {\n    //         if (error) throw Error(error)\n    //         return id\n    //     })\n\n    return clientApi.registerUser(name, surname, id, phone, adress, city, email, password, passwordConfirmation).then(function () {});\n  },\n  ///afegir validacions de camps\n\n  /**\r\n  * Registers a user.\r\n  * \r\n  * @param {string} name \r\n  * @param {string} surname \r\n  * @param {string} email \r\n  * @param {string} password \r\n  * @param {string} passwordConfirmation \r\n  */\n  registerPet: function registerPet(name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details) {\n    if (typeof name !== 'string') throw TypeError(name + ' is not a string');\n    if (!name.trim().length) throw Error('name cannot be empty');\n    if (typeof specie !== 'string') throw TypeError(specie + ' is not a string');\n    if (!specie.trim().length) throw Error('specie cannot be empty');\n    if (typeof breed !== 'string') throw TypeError(breed + ' is not a string');\n    if (!breed.trim().length) throw Error('breed cannot be empty');\n    if (typeof color !== 'string') throw TypeError(color + ' is not a string');\n    if (!color.trim().length) throw Error('color cannot be empty');\n    if (typeof gender !== 'string') throw TypeError(gender + ' is not a string');\n    if (!gender.trim().length) throw Error('gender cannot be empty');\n    if (typeof birthdate != 'string') throw TypeError(birthdate + 'is not a string');\n    if (!birthdate.trim().length) throw Error('birthdate cannot be empty');\n    if (typeof microchip != 'string') throw TypeError(microchip + 'is not a string');\n    if (!microchip.trim().length) throw Error('microchip cannot be empty');\n    if (typeof petlicence != 'string') throw TypeError(petlicence + 'is not a string');\n    if (!microchip.trim().length) throw Error('microchip cannot be empty');\n    if (typeof neutered != 'string') throw TypeError(neutered + 'is not a string');\n    if (!neutered.trim().length) throw Error('neutered cannot be empty');\n    if (typeof vaccionations != 'string') throw TypeError(vaccionations + 'is not a string'); // if (!vaccionations.trim().length) throw Error ('vaccionations cannot be empty')\n\n    if (typeof controls != 'string') throw TypeError(controls + 'is not a string'); // if (!controls.trim().length) throw Error ('controls cannot be empty')\n\n    if (typeof details != 'string') throw TypeError(details + 'is not a string'); // if (!details.trim().length) throw Error ('details cannot be empty')\n\n    console.log(name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details); // return fetch(`${this.url}/pet`, {\n    //     method: 'POST',\n    //     headers: {\n    //         'content-type': 'application/json'\n    //     },\n    //     body: JSON.stringify({ name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details})\n    // })\n    //     .then(response => response.json())\n    //     .then(response => {\n    //         const { status } = response\n    //         debugger\n    //         if (status === 'OK') return response.data.id\n    //         throw Error(response.error)\n    //     })\n\n    return clientApi.registerPet(name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details).then(function () {});\n  },\n\n  /**\r\n   * Logs in the user by its credentials.\r\n   * \r\n   * @param {string} email \r\n   * @param {string} password \r\n   */\n  logInUser: function logInUser(email, password) {\n    var _this = this;\n\n    if (typeof email !== 'string') throw TypeError(email + ' is not a string');\n    if (!email.trim().length) throw Error('email cannot be empty');\n    if (typeof password !== 'string') throw TypeError(password + ' is not a string');\n    if (!password.trim().length) throw Error('password cannot be empty'); // return fetch(`${this.url}/user/auth`, {\n    //     method: 'POST',\n    //     headers: {\n    //         'content-type': 'application/json'\n    //     },\n    //     body: JSON.stringify({ email, password })\n    // })\n    //     .then(response => response.json())\n    //     .then(response => {\n    //         if (response.error) throw Error(response.error)\n    //         return response.token\n    //     })\n\n    return clientApi.authenticateUser(email, password).then(function (token) {\n      return _this.__userApiToken__ = token;\n    });\n  },\n\n  /**\r\n   * Checks user is logged in.\r\n   */\n  get isUserLoggedIn() {\n    return !!this.__userApiToken__;\n  },\n\n  /**\r\n   * Logs out the user.\r\n   */\n  logOutUser: function logOutUser() {\n    this.__userApiToken__ = null;\n  },\n  ////////////////////// cal un retrievePet????????????????\n  retrieveUser: function retrieveUser(token) {\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    if (!token.trim().length) throw Error('token is empty'); // return fetch(`${this.url}/user`, {\n    //     headers: {\n    //         authorization: `Bearer ${token}`\n    //     }\n    // })\n    //     .then(response => response.json())\n    //     .then(response => {\n    //         if (response.error) throw Error(response.error)\n    //         return response\n    //     })\n\n    return clientApi.retrieveUser(this.__userApiToken__).then(function (_ref) {\n      var name = _ref.name,\n          surname = _ref.surname,\n          id = _ref.id,\n          phone = _ref.phone,\n          adress = _ref.adress,\n          city = _ref.city,\n          email = _ref.email,\n          password = _ref.password,\n          passwordConfirmation = _ref.passwordConfirmation;\n      return {\n        name: name,\n        surname: surname,\n        id: id,\n        phone: phone,\n        adress: adress,\n        city: city,\n        email: email,\n        password: password,\n        passwordConfirmation: passwordConfirmation\n      };\n    });\n  }\n};\nexport default logic;","map":{"version":3,"sources":["C:\\Users\\lluna\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\clara-rufi\\final_project\\client\\src\\logic\\index.js"],"names":["clientApi","logic","__userApiToken__","registerUser","name","surname","id","phone","adress","city","email","password","passwordConfirmation","TypeError","trim","length","Error","console","log","then","registerPet","specie","breed","color","gender","birthdate","microchip","petlicence","neutered","vaccionations","controls","details","logInUser","authenticateUser","token","isUserLoggedIn","logOutUser","retrieveUser"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nimport clientApi from '../clientApi'\r\n\r\n/**\r\n * Abstraction of business logic.\r\n */\r\nconst logic = {\r\n    __userApiToken__: null,\r\n\r\n    ///afegir validacions de camps\r\n    /**\r\n    * Registers a user.\r\n    * \r\n    * @param {string} name \r\n    * @param {string} surname \r\n    * @param {string} email \r\n    * @param {string} password \r\n    * @param {string} passwordConfirmation \r\n    */\r\n    registerUser(name, surname, id, phone, adress, city, email, password, passwordConfirmation) {\r\n        if (typeof name !== 'string') throw TypeError(name + ' is not a string')\r\n\r\n        if (!name.trim().length) throw Error('name cannot be empty')\r\n\r\n        if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')\r\n\r\n        if (!surname.trim().length) throw Error('surname cannot be empty')\r\n\r\n        if (typeof id !== 'string') throw TypeError(id + ' is not a string')\r\n\r\n        if (!id.trim().length) throw Error('id cannot be empty')\r\n\r\n        if(typeof phone !== 'string') throw TypeError (phone + ' is not a string')\r\n\r\n        if (!phone.trim().length) throw Error ('phone cannot be empty')\r\n\r\n        if(typeof adress !== 'string') throw TypeError (adress + 'is not a string')\r\n\r\n        if (!adress.trim().length) throw Error ('adress cannot be empty')\r\n\r\n        if(typeof city !== 'string') throw TypeError (city + 'is not a string')\r\n\r\n        if (!city.trim().length) throw Error ('city cannot be empty')\r\n\r\n        if (typeof email !== 'string') throw TypeError(email + ' is not a string')\r\n\r\n        if (!email.trim().length) throw Error('email cannot be empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(password + ' is not a string')\r\n\r\n        if (!password.trim().length) throw Error('password cannot be empty')\r\n\r\n        if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')\r\n\r\n        if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')\r\n\r\n        if (password !== passwordConfirmation) throw Error('passwords do not match')\r\n\r\n        console.log(name, surname, id, phone, adress, city, email, password, passwordConfirmation)\r\n\r\n        // return fetch(`${this.url}/user`, {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         'content-type': 'application/json'\r\n        //     },\r\n            \r\n        //     body: JSON.stringify({ name, surname, id, phone, adress, city, email, password, passwordConfirmation })\r\n        // })\r\n        //     .then(response => response.json())\r\n        //     .then(({ id, error }) => {\r\n        //         if (error) throw Error(error)\r\n\r\n        //         return id\r\n        //     })\r\n        return clientApi.registerUser(name, surname, id, phone, adress, city, email, password, passwordConfirmation)\r\n            .then(() => {})\r\n    },\r\n\r\n ///afegir validacions de camps\r\n\r\n    /**\r\n    * Registers a user.\r\n    * \r\n    * @param {string} name \r\n    * @param {string} surname \r\n    * @param {string} email \r\n    * @param {string} password \r\n    * @param {string} passwordConfirmation \r\n    */\r\n\r\n    registerPet(name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details) {\r\n        if (typeof name !== 'string') throw TypeError(name + ' is not a string')\r\n\r\n        if (!name.trim().length) throw Error('name cannot be empty')\r\n\r\n        if (typeof specie !== 'string') throw TypeError(specie + ' is not a string')\r\n\r\n        if (!specie.trim().length) throw Error('specie cannot be empty')\r\n\r\n        if (typeof breed !== 'string') throw TypeError(breed + ' is not a string')\r\n\r\n        if (!breed.trim().length) throw Error('breed cannot be empty')\r\n\r\n        if (typeof color !== 'string') throw TypeError(color + ' is not a string')\r\n\r\n        if (!color.trim().length) throw Error('color cannot be empty')\r\n\r\n        if (typeof gender !== 'string') throw TypeError(gender + ' is not a string')\r\n\r\n        if (!gender.trim().length) throw Error('gender cannot be empty')\r\n\r\n        if(typeof birthdate != 'string') throw TypeError (birthdate + 'is not a string')\r\n\r\n        if (!birthdate.trim().length) throw Error ('birthdate cannot be empty')\r\n\r\n        if(typeof microchip != 'string') throw TypeError (microchip + 'is not a string')\r\n\r\n        if (!microchip.trim().length) throw Error ('microchip cannot be empty')\r\n\r\n        if(typeof petlicence != 'string') throw TypeError (petlicence + 'is not a string')\r\n\r\n        if (!microchip.trim().length) throw Error ('microchip cannot be empty')\r\n\r\n        if(typeof neutered != 'string') throw TypeError (neutered + 'is not a string')\r\n\r\n        if (!neutered.trim().length) throw Error ('neutered cannot be empty')\r\n\r\n        if(typeof vaccionations != 'string') throw TypeError (vaccionations + 'is not a string')\r\n\r\n        // if (!vaccionations.trim().length) throw Error ('vaccionations cannot be empty')\r\n\r\n        if(typeof controls != 'string') throw TypeError (controls + 'is not a string')\r\n\r\n        // if (!controls.trim().length) throw Error ('controls cannot be empty')\r\n\r\n        if(typeof details != 'string') throw TypeError (details + 'is not a string')\r\n\r\n        // if (!details.trim().length) throw Error ('details cannot be empty')\r\n\r\n        console.log(name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details)\r\n       \r\n        // return fetch(`${this.url}/pet`, {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         'content-type': 'application/json'\r\n        //     },\r\n        //     body: JSON.stringify({ name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details})\r\n        // })\r\n        //     .then(response => response.json())\r\n        //     .then(response => {\r\n        //         const { status } = response\r\n        //         debugger\r\n        //         if (status === 'OK') return response.data.id\r\n\r\n        //         throw Error(response.error)\r\n        //     })\r\n\r\n        return clientApi.registerPet(name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details)\r\n        .then(() => {})\r\n   \r\n\r\n    },\r\n\r\n    /**\r\n     * Logs in the user by its credentials.\r\n     * \r\n     * @param {string} email \r\n     * @param {string} password \r\n     */\r\n    logInUser(email, password) {\r\n        if (typeof email !== 'string') throw TypeError(email + ' is not a string')\r\n\r\n        if (!email.trim().length) throw Error('email cannot be empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(password + ' is not a string')\r\n\r\n        if (!password.trim().length) throw Error('password cannot be empty')\r\n\r\n\r\n        // return fetch(`${this.url}/user/auth`, {\r\n           \r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         'content-type': 'application/json'\r\n        //     },\r\n        //     body: JSON.stringify({ email, password })\r\n        // })\r\n        //     .then(response => response.json())\r\n        //     .then(response => {\r\n        //         if (response.error) throw Error(response.error)\r\n\r\n        //         return response.token\r\n        //     })\r\n        return clientApi.authenticateUser(email, password)\r\n        .then(token => this.__userApiToken__ = token)\r\n\r\n    },\r\n\r\n    /**\r\n     * Checks user is logged in.\r\n     */\r\n    get isUserLoggedIn() {\r\n        return !!this.__userApiToken__\r\n    },\r\n\r\n    /**\r\n     * Logs out the user.\r\n     */\r\n    logOutUser() {\r\n        this.__userApiToken__ = null\r\n    },\r\n\r\n    ////////////////////// cal un retrievePet????????????????\r\n    retrieveUser(token) {\r\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        if (!token.trim().length) throw Error('token is empty')\r\n\r\n        // return fetch(`${this.url}/user`, {\r\n        //     headers: {\r\n        //         authorization: `Bearer ${token}`\r\n        //     }\r\n        // })\r\n        //     .then(response => response.json())\r\n        //     .then(response => {\r\n        //         if (response.error) throw Error(response.error)\r\n\r\n        //         return response\r\n        //     })\r\n        return clientApi.retrieveUser(this.__userApiToken__)\r\n            .then (({name, surname, id, phone, adress, city, email, password, passwordConfirmation})=>({\r\n                name,\r\n                surname,\r\n                id,\r\n                phone,\r\n                adress,\r\n                city,\r\n                email,\r\n                password,\r\n                passwordConfirmation\r\n            }))\r\n    },\r\n\r\n    // updateUser(token, data) {\r\n    //     if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n    //     if (!token.trim().length) throw Error('token is empty')\r\n\r\n    //     if (data.constructor !== Object) throw TypeError(`${data} is not an object`)\r\n    //     debugger\r\n    //     return fetch(`${this.url}/user`, {\r\n    //         method: 'PUT',\r\n    //         headers: {\r\n    //             authorization: `Bearer ${token}`,\r\n    //             'content-type': 'application/json'\r\n    //         },\r\n    //         body: JSON.stringify(data)\r\n    //     })\r\n    //         .then(response => response.json())\r\n    //         .then(response => {\r\n    //             if (response.error) throw Error(response.error)\r\n\r\n    //             return response\r\n    //         })\r\n    // },\r\n\r\n    // removeUser(token, email, password) {\r\n    //     if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n    //     if (!token.trim().length) throw Error('token is empty')\r\n\r\n    //     if (typeof email !== 'string') throw TypeError(`${email} is not a string`)\r\n    //     if (!email.trim().length) throw Error('email is empty')\r\n\r\n    //     if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\r\n    //     if (!password.trim().length) throw Error('password is empty')\r\n\r\n    //     return fetch(`${this.url}/user`, {\r\n    //         method: 'DELETE',\r\n    //         headers: {\r\n    //             authorization: `Bearer ${token}`,\r\n    //             'content-type': 'application/json'\r\n    //         },\r\n    //         body: JSON.stringify({ email, password })\r\n    //     })\r\n    //         .then(response => response.json())\r\n    //         .then(response => {\r\n    //             if (response.error) throw Error(response.error)\r\n\r\n    //             return response\r\n    //         })\r\n    // },\r\n\r\n}\r\n\r\nexport default logic"]},"metadata":{},"sourceType":"module"}