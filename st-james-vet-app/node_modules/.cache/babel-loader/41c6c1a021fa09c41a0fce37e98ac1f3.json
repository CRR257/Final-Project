{"ast":null,"code":"'use strict';\n/**\r\n * Abstraction of business logic.\r\n */\n\nvar logic = {\n  url: 'http://localhost:8000/api',\n  // __userId__: null,\n  __userToken__: null,\n  __userAdmin__: null,\n  __updateToken__: function __updateToken__() {\n    this.__userToken__ = sessionStorage.getItem('__userToken__');\n  },\n\n  /**\r\n  * Registers a user.\r\n  * \r\n  * @param {string} name \r\n  * @param {string} surname\r\n  * @param {string} surname\r\n  * @param {string} idCard\r\n  * @param {string} phone\r\n  * @param {string} adress\r\n  * @param {string} city \r\n  * @param {string} email \r\n  * @param {string} password \r\n  * @param {string} passwordConfirmation \r\n  */\n  registerUser: function registerUser(name, surname, idCard, phone, adress, city, email, password, passwordConfirmation) {\n    if (typeof name !== 'string') throw TypeError(name + ' is not a string');\n    if (!name.trim().length) throw Error('name cannot be empty');\n    if (typeof surname !== 'string') throw TypeError(surname + ' is not a string');\n    if (!surname.trim().length) throw Error('surname cannot be empty');\n    if (typeof idCard !== 'string') throw TypeError(idCard + ' is not a string');\n    if (!idCard.trim().length) throw Error('idCard cannot be empty');\n    if (typeof phone !== 'string') throw TypeError(phone + ' is not a string');\n    if (!phone.trim().length) throw Error('phone cannot be empty');\n    if (typeof adress !== 'string') throw TypeError(adress + ' is not a string');\n    if (!adress.trim().length) throw Error('adress cannot be empty');\n    if (typeof city !== 'string') throw TypeError(city + ' is not a string');\n    if (!city.trim().length) throw Error('city cannot be empty');\n    if (typeof email !== 'string') throw TypeError(email + ' is not a string');\n    if (!email.trim().length) throw Error('email cannot be empty');\n    if (typeof password !== 'string') throw TypeError(password + ' is not a string');\n    if (!password.trim().length) throw Error('password cannot be empty');\n    if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string');\n    if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty');\n    if (password !== passwordConfirmation) throw Error('passwords do not match');\n    console.log(name, surname, idCard, phone, adress, city, email, password, passwordConfirmation);\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        surname: surname,\n        idCard: idCard,\n        phone: phone,\n        adress: adress,\n        city: city,\n        email: email,\n        password: password,\n        passwordConfirmation: passwordConfirmation\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (_ref) {\n      var message = _ref.message,\n          error = _ref.error;\n      if (error) throw Error(error);\n      return message;\n    });\n  },\n\n  /**\r\n  * Registers a owner's pet.\r\n  * \r\n  * @param {string} owner \r\n  * @param {string} name \r\n  * @param {string} specie\r\n  * @param {string} breed\r\n  * @param {string} color\r\n  * @param {string} gender\r\n  * @param {string} birthdate\r\n  * @param {string} microchip\r\n  * @param {string} petlicence\r\n  * @param {string} neutered\r\n  * @param {string} vaccionations\r\n  * @param {string} controls\r\n  * @param {string} details\r\n  */\n  registerPet: function registerPet(owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details) {\n    if (typeof owner !== 'string') throw TypeError(owner + ' is not a string');\n    if (!owner.trim().length) throw Error('owner cannot be empty');\n    if (typeof name !== 'string') throw TypeError(name + ' is not a string');\n    if (!name.trim().length) throw Error('name cannot be empty');\n    if (typeof specie !== 'string') throw TypeError(specie + ' is not a string');\n    if (!specie.trim().length) throw Error('specie cannot be empty');\n    if (typeof breed !== 'string') throw TypeError(breed + ' is not a string');\n    if (!breed.trim().length) throw Error('breed cannot be empty');\n    if (typeof color !== 'string') throw TypeError(color + ' is not a string');\n    if (!color.trim().length) throw Error('color cannot be empty');\n    if (typeof gender !== 'string') throw TypeError(gender + ' is not a string');\n    if (!gender.trim().length) throw Error('gender cannot be empty');\n    if (typeof birthdate != 'string') throw TypeError(birthdate + ' is not a string');\n    if (!birthdate.trim().length) throw Error('birthdate cannot be empty');\n    if (typeof microchip != 'string') throw TypeError(microchip + ' is not a string');\n    if (!microchip.trim().length) throw Error('microchip cannot be empty');\n    if (typeof petlicence != 'string') throw TypeError(petlicence + ' is not a string');\n    if (!petlicence.trim().length) throw Error('petlicence cannot be empty');\n    if (typeof vaccionations != 'string') throw TypeError(vaccionations + ' is not a string');\n    if (!vaccionations.trim().length) throw Error('vaccionations cannot be empty');\n    if (typeof neutered != 'string') throw TypeError(neutered + ' is not a string');\n    if (!neutered.trim().length) throw Error('neutered cannot be empty');\n    if (typeof controls != 'string') throw TypeError(controls + ' is not a string');\n    if (!controls.trim().length) throw Error('controls cannot be empty');\n    if (typeof details != 'string') throw TypeError(details + ' is not a string');\n    if (!details.trim().length) throw Error('details cannot be empty');\n    console.log(owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details);\n    debugger;\n    return fetch(\"\".concat(this.url, \"/pet\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        owner: owner,\n        name: name,\n        specie: specie,\n        breed: breed,\n        color: color,\n        gender: gender,\n        birthdate: birthdate,\n        microchip: microchip,\n        petlicence: petlicence,\n        neutered: neutered,\n        vaccionations: vaccionations,\n        controls: controls,\n        details: details\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (_ref2) {\n      var message = _ref2.message,\n          error = _ref2.error;\n      if (error) throw Error(error);\n      return message;\n    });\n  },\n\n  /**\r\n   * Logs in the user by its credentials.\r\n   * \r\n   * @param {string} email \r\n   * @param {string} password \r\n   */\n  logInUser: function logInUser(email, password) {\n    var _this = this;\n\n    if (typeof email !== 'string') throw TypeError(email + ' is not a string');\n    if (!email.trim().length) throw Error('email cannot be empty');\n    if (typeof password !== 'string') throw TypeError(password + ' is not a string');\n    if (!password.trim().length) throw Error('password cannot be empty');\n    return fetch(\"\".concat(this.url, \"/user/auth\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      _this.__userToken__ = response.token;\n      _this.__userAdmin__ = response.role === 'admin';\n    });\n  },\n\n  /**\r\n   * Checks user is logged in.\r\n   */\n  get isUserLoggedIn() {\n    return !!this.__userToken__;\n  },\n\n  /**\r\n   * Logs out the user.\r\n   */\n  logOutUser: function logOutUser() {\n    this.__userAdmin__ = null;\n    this.__userToken__ = null;\n    this.removeStorage();\n    window.location.reload();\n  },\n\n  /**\r\n   * Remove session storage\r\n   */\n  removeStorage: function removeStorage() {\n    sessionStorage.clear();\n  },\n\n  /**\r\n   * Check if the user logged is adnim\r\n   */\n  get isAdmin() {\n    return this.__userAdmin__ === 'true';\n  },\n\n  /**\r\n   * Retrieve all users registered\r\n   */\n  retrieveUsers: function retrieveUsers() {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/users\"), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve owner's appointments\r\n   */\n  retrieveAppointmentsOwner: function retrieveAppointmentsOwner() {\n    debugger;\n\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/appointmentsOwner\"), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      response.forEach(function (appointment) {\n        return appointment.date = new Date(appointment.date);\n      });\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve month's appointments\r\n   * \r\n   * @param {string} year \r\n   * @param {string} month \r\n   */\n  retrieveAppointments: function retrieveAppointments(year, month) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/appointments/\").concat(year, \"/\").concat(month), {\n      method: 'GET',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__),\n        'content-type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      response.forEach(function (appointment) {\n        return appointment.date = new Date(appointment.date);\n      });\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve pet's information\r\n   * \r\n   * @param {string} userId \r\n   */\n  retrievePets: function retrievePets(userId) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/pets/\").concat(userId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Assing appointments\r\n   * \r\n   * @param {string} owner \r\n   * @param {string} pet \r\n   * @param {string} date \r\n   */\n  assignAppointment: function assignAppointment(owner, pet, date) {\n    if (typeof owner !== 'string') throw TypeError(owner + ' is not a string');\n    if (!owner.trim().length) throw Error('owner cannot be empty');\n    if (typeof pet !== 'string') throw TypeError(pet + ' is not a string');\n    if (!pet.trim().length) throw Error('pet cannot be empty');\n    if (typeof date !== 'string') throw TypeError(date + ' is not a string'); // if (!date.trim().length) throw Error(' date cannot be empty') /////////////\n\n    console.log(owner, pet, date);\n\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/appointment\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        owner: owner,\n        pet: pet,\n        date: date\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Delete appointment\r\n   * \r\n   * @param {string} Id \r\n   */\n  deleteAppointment: function deleteAppointment(Id) {\n    if (typeof Id !== 'string') throw TypeError(Id + ' is not a string');\n    if (!Id.trim().length) throw Error('Id cannot be empty');\n\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/appointment\"), {\n      method: 'DELETE',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        Id: Id\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * \r\n   * Retrieve all users\r\n   */\n  retrieveUser: function retrieveUser() {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/user/\"), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve user's information\r\n   * \r\n   * @param {string} userSelectedId \r\n   */\n  retrieveUserSelected: function retrieveUserSelected(userSelectedId) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/user/\").concat(userSelectedId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve pet's information\r\n   * \r\n   * @param {string} petsId \r\n   */\n  retrievePet: function retrievePet(petsId) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/pet/\").concat(petsId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve appointment information depending on user logged\r\n   * \r\n   * @param {string} petsId \r\n   */\n  retrievePetVisit: function retrievePetVisit(petsId) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/visit/\").concat(petsId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Update user's information\r\n   * \r\n   * @param {string} name \r\n   * @param {string} surname \r\n   * @param {string} idCard \r\n   * @param {string} phone \r\n   * @param {string} adress \r\n   * @param {string} city \r\n   * @param {string} email \r\n   */\n  updateUser: function updateUser(name, surname, idCard, phone, adress, city, email) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        surname: surname,\n        idCard: idCard,\n        phone: phone,\n        adress: adress,\n        city: city,\n        email: email\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Update pet's information\r\n   * \r\n   * @param {string} petsId \r\n   * @param {string} name \r\n   * @param {string} microchip \r\n   * @param {sgring} petlicence \r\n   */\n  updatePet: function updatePet(petsId, name, microchip, petlicence) {\n    debugger;\n\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/pet\"), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        petsId: petsId,\n        name: name,\n        microchip: microchip,\n        petlicence: petlicence\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Update visit's information\r\n   * \r\n   * @param {string} petsId \r\n   * @param {string} vaccionations \r\n   * @param {string} controls \r\n   * @param {string} details \r\n   */\n  updateVisit: function updateVisit(petsId, vaccionations, controls, details) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/visit\"), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        petsId: petsId,\n        vaccionations: vaccionations,\n        controls: controls,\n        details: details\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  }\n};\nexport default logic;","map":{"version":3,"sources":["C:\\Users\\lluna\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\clara-rufi\\st-james-vet\\st-james-vet-app\\src\\logic\\index.js"],"names":["logic","url","__userToken__","__userAdmin__","__updateToken__","sessionStorage","getItem","registerUser","name","surname","idCard","phone","adress","city","email","password","passwordConfirmation","TypeError","trim","length","Error","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","message","error","registerPet","owner","specie","breed","color","gender","birthdate","microchip","petlicence","neutered","vaccionations","controls","details","logInUser","token","role","isUserLoggedIn","logOutUser","removeStorage","window","location","reload","clear","isAdmin","retrieveUsers","authorization","retrieveAppointmentsOwner","forEach","appointment","date","Date","retrieveAppointments","year","month","retrievePets","userId","assignAppointment","pet","deleteAppointment","Id","retrieveUser","retrieveUserSelected","userSelectedId","retrievePet","petsId","retrievePetVisit","updateUser","updatePet","updateVisit"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\n\r\n/**\r\n * Abstraction of business logic.\r\n */\r\nconst logic = {\r\n    url: 'http://localhost:8000/api',\r\n    // __userId__: null,\r\n    __userToken__: null,\r\n    __userAdmin__: null,\r\n    __updateToken__(){\r\n        this.__userToken__ = sessionStorage.getItem('__userToken__')\r\n    },\r\n\r\n    /**\r\n    * Registers a user.\r\n    * \r\n    * @param {string} name \r\n    * @param {string} surname\r\n    * @param {string} surname\r\n    * @param {string} idCard\r\n    * @param {string} phone\r\n    * @param {string} adress\r\n    * @param {string} city \r\n    * @param {string} email \r\n    * @param {string} password \r\n    * @param {string} passwordConfirmation \r\n    */\r\n    registerUser(name, surname, idCard, phone, adress, city, email, password, passwordConfirmation) {\r\n        if (typeof name !== 'string') throw TypeError(name + ' is not a string')\r\n\r\n        if (!name.trim().length) throw Error('name cannot be empty')\r\n\r\n        if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')\r\n\r\n        if (!surname.trim().length) throw Error('surname cannot be empty')\r\n\r\n        if (typeof idCard !== 'string') throw TypeError(idCard + ' is not a string')\r\n\r\n        if (!idCard.trim().length) throw Error('idCard cannot be empty')\r\n\r\n        if(typeof phone !== 'string') throw TypeError (phone + ' is not a string')\r\n\r\n        if (!phone.trim().length) throw Error ('phone cannot be empty')\r\n\r\n        if(typeof adress !== 'string') throw TypeError (adress + ' is not a string')\r\n\r\n        if (!adress.trim().length) throw Error ('adress cannot be empty')\r\n\r\n        if(typeof city !== 'string') throw TypeError (city + ' is not a string')\r\n\r\n        if (!city.trim().length) throw Error ('city cannot be empty')\r\n\r\n        if (typeof email !== 'string') throw TypeError(email + ' is not a string')\r\n\r\n        if (!email.trim().length) throw Error('email cannot be empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(password + ' is not a string')\r\n\r\n        if (!password.trim().length) throw Error('password cannot be empty')\r\n\r\n        if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')\r\n\r\n        if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')\r\n\r\n        if (password !== passwordConfirmation) throw Error('passwords do not match')\r\n\r\n        console.log(name, surname, idCard, phone, adress, city, email, password, passwordConfirmation)\r\n\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            \r\n            body: JSON.stringify({ name, surname, idCard, phone, adress, city, email, password, passwordConfirmation })\r\n        })\r\n            .then(response => response.json())\r\n            .then(({ message, error }) => {\r\n                if (error) throw Error(error)\r\n\r\n                return message\r\n            })\r\n    },\r\n\r\n    /**\r\n    * Registers a owner's pet.\r\n    * \r\n    * @param {string} owner \r\n    * @param {string} name \r\n    * @param {string} specie\r\n    * @param {string} breed\r\n    * @param {string} color\r\n    * @param {string} gender\r\n    * @param {string} birthdate\r\n    * @param {string} microchip\r\n    * @param {string} petlicence\r\n    * @param {string} neutered\r\n    * @param {string} vaccionations\r\n    * @param {string} controls\r\n    * @param {string} details\r\n    */\r\n    registerPet(owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered,vaccionations, controls, details) {\r\n        \r\n        if (typeof owner !== 'string') throw TypeError(owner + ' is not a string')\r\n\r\n        if (!owner.trim().length) throw Error('owner cannot be empty')\r\n\r\n        if (typeof name !== 'string') throw TypeError(name + ' is not a string')\r\n\r\n        if (!name.trim().length) throw Error('name cannot be empty')\r\n\r\n        if (typeof specie !== 'string') throw TypeError(specie + ' is not a string')\r\n\r\n        if (!specie.trim().length) throw Error('specie cannot be empty')\r\n\r\n        if (typeof breed !== 'string') throw TypeError(breed + ' is not a string')\r\n\r\n        if (!breed.trim().length) throw Error('breed cannot be empty')\r\n\r\n        if (typeof color !== 'string') throw TypeError(color + ' is not a string')\r\n\r\n        if (!color.trim().length) throw Error('color cannot be empty')\r\n\r\n        if (typeof gender !== 'string') throw TypeError(gender + ' is not a string')\r\n\r\n        if (!gender.trim().length) throw Error('gender cannot be empty')\r\n\r\n        if(typeof birthdate != 'string') throw TypeError (birthdate + ' is not a string')\r\n\r\n        if (!birthdate.trim().length) throw Error ('birthdate cannot be empty')\r\n\r\n        if(typeof microchip != 'string') throw TypeError (microchip + ' is not a string')\r\n\r\n        if (!microchip.trim().length) throw Error ('microchip cannot be empty')\r\n\r\n        if(typeof petlicence != 'string') throw TypeError (petlicence + ' is not a string')\r\n\r\n        if (!petlicence.trim().length) throw Error ('petlicence cannot be empty')\r\n\r\n        if(typeof vaccionations != 'string') throw TypeError (vaccionations + ' is not a string')\r\n\r\n        if (!vaccionations.trim().length) throw Error ('vaccionations cannot be empty')\r\n\r\n        if(typeof neutered != 'string') throw TypeError (neutered + ' is not a string')\r\n\r\n        if (!neutered.trim().length) throw Error ('neutered cannot be empty')\r\n\r\n        if(typeof controls != 'string') throw TypeError (controls + ' is not a string')\r\n\r\n        if (!controls.trim().length) throw Error ('controls cannot be empty')\r\n\r\n        if(typeof details != 'string') throw TypeError (details + ' is not a string')\r\n\r\n        if (!details.trim().length) throw Error ('details cannot be empty')\r\n\r\n\r\n        console.log(owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details)\r\n       debugger\r\n        return fetch(`${this.url}/pet`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details})\r\n        })\r\n            .then(response => response.json())\r\n            .then(({ message, error }) => {\r\n                if (error) throw Error(error)\r\n        \r\n                return message\r\n            })\r\n    },\r\n   \r\n\r\n    /**\r\n     * Logs in the user by its credentials.\r\n     * \r\n     * @param {string} email \r\n     * @param {string} password \r\n     */\r\n    logInUser(email, password) {\r\n        if (typeof email !== 'string') throw TypeError(email + ' is not a string')\r\n\r\n        if (!email.trim().length) throw Error('email cannot be empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(password + ' is not a string')\r\n\r\n        if (!password.trim().length) throw Error('password cannot be empty')\r\n  \r\n        return fetch(`${this.url}/user/auth`, {\r\n           \r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ email, password })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                this.__userToken__ = response.token\r\n                this.__userAdmin__ = (response.role === 'admin')\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Checks user is logged in.\r\n     */\r\n    get isUserLoggedIn() {\r\n        return !!this.__userToken__\r\n    },\r\n\r\n    /**\r\n     * Logs out the user.\r\n     */\r\n    logOutUser() {\r\n        this.__userAdmin__ = null\r\n        this.__userToken__ = null\r\n        this.removeStorage()\r\n        window.location.reload()\r\n    },\r\n\r\n    /**\r\n     * Remove session storage\r\n     */\r\n    removeStorage(){\r\n    sessionStorage.clear()\r\n    },\r\n\r\n    /**\r\n     * Check if the user logged is adnim\r\n     */\r\n    get isAdmin() {\r\n        return this.__userAdmin__ === 'true'\r\n    },\r\n\r\n    /**\r\n     * Retrieve all users registered\r\n     */\r\n    retrieveUsers() {\r\n        \r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/users`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Retrieve owner's appointments\r\n     */\r\n    retrieveAppointmentsOwner() {\r\n        debugger\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/appointmentsOwner`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                response.forEach(appointment => appointment.date = new Date(appointment.date))\r\n                \r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Retrieve month's appointments\r\n     * \r\n     * @param {string} year \r\n     * @param {string} month \r\n     */\r\n    retrieveAppointments(year, month) {  \r\n          \r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/appointments/${year}/${month}`, {\r\n          \r\n            method: 'GET',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                response.forEach(appointment => appointment.date = new Date(appointment.date))\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Retrieve pet's information\r\n     * \r\n     * @param {string} userId \r\n     */\r\n    retrievePets(userId){\r\n\r\n          this.__updateToken__()\r\n        return fetch(`${this.url}/pets/${userId}`, {\r\n        \r\n            headers:{\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Assing appointments\r\n     * \r\n     * @param {string} owner \r\n     * @param {string} pet \r\n     * @param {string} date \r\n     */\r\n    assignAppointment(owner, pet, date){\r\n        if (typeof owner !== 'string') throw TypeError(owner + ' is not a string')\r\n\r\n        if (!owner.trim().length) throw Error('owner cannot be empty')\r\n\r\n        if (typeof pet !== 'string') throw TypeError(pet + ' is not a string')\r\n\r\n        if (!pet.trim().length) throw Error('pet cannot be empty')\r\n\r\n        if (typeof date !== 'string') throw TypeError(date + ' is not a string')\r\n\r\n        // if (!date.trim().length) throw Error(' date cannot be empty') /////////////\r\n\r\n        console.log(owner, pet, date)\r\n\r\n          this.__updateToken__()\r\n        return fetch(`${this.url}/appointment`, {\r\n            method: 'POST',\r\n            headers:{\r\n\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ owner, pet, date})\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Delete appointment\r\n     * \r\n     * @param {string} Id \r\n     */\r\n    deleteAppointment(Id){\r\n\r\n        if (typeof Id !== 'string') throw TypeError(Id + ' is not a string')\r\n\r\n        if (!Id.trim().length) throw Error('Id cannot be empty')\r\n\r\n          this.__updateToken__()\r\n        return fetch(`${this.url}/appointment`, {\r\n            method: 'DELETE',\r\n            headers:{\r\n        \r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ Id })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * \r\n     * Retrieve all users\r\n     */\r\n    retrieveUser() {\r\n      \r\n          this.__updateToken__()\r\n        return fetch(`${this.url}/user/`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n        },\r\n    \r\n    /**\r\n     * Retrieve user's information\r\n     * \r\n     * @param {string} userSelectedId \r\n     */\r\n    retrieveUserSelected(userSelectedId) {\r\n        \r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/user/${userSelectedId}`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n        },\r\n           \r\n    /**\r\n     * Retrieve pet's information\r\n     * \r\n     * @param {string} petsId \r\n     */\r\n    retrievePet(petsId) {\r\n      \r\n          this.__updateToken__()\r\n        return fetch(`${this.url}/pet/${petsId}`, {\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Retrieve appointment information depending on user logged\r\n     * \r\n     * @param {string} petsId \r\n     */\r\n    retrievePetVisit(petsId) {\r\n       \r\n          this.__updateToken__()\r\n        return fetch(`${this.url}/visit/${petsId}`, {\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n\r\n    },\r\n    \r\n    /**\r\n     * Update user's information\r\n     * \r\n     * @param {string} name \r\n     * @param {string} surname \r\n     * @param {string} idCard \r\n     * @param {string} phone \r\n     * @param {string} adress \r\n     * @param {string} city \r\n     * @param {string} email \r\n     */\r\n    updateUser(name, surname, idCard, phone, adress, city, email) {\r\n       \r\n          this.__updateToken__()\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({name, surname, idCard, phone, adress, city, email})\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n  \r\n    /**\r\n     * Update pet's information\r\n     * \r\n     * @param {string} petsId \r\n     * @param {string} name \r\n     * @param {string} microchip \r\n     * @param {sgring} petlicence \r\n     */\r\n    updatePet(petsId, name, microchip, petlicence) {\r\n        debugger\r\n      \r\n          this.__updateToken__()\r\n        return fetch(`${this.url}/pet`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({petsId, name, microchip, petlicence})\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Update visit's information\r\n     * \r\n     * @param {string} petsId \r\n     * @param {string} vaccionations \r\n     * @param {string} controls \r\n     * @param {string} details \r\n     */\r\n    updateVisit(petsId, vaccionations, controls, details) {\r\n       \r\n          this.__updateToken__()\r\n        return fetch(`${this.url}/visit`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({petsId, vaccionations, controls, details})\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n        })\r\n    }\r\n   \r\n}\r\n\r\nexport default logic"]},"metadata":{},"sourceType":"module"}