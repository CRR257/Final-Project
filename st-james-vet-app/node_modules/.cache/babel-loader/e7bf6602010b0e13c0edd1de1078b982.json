{"ast":null,"code":"'use strict';\n/**\r\n * Abstraction of business logic.\r\n */\n\nvar logic = {\n  url: null,\n  __userToken__: null,\n  __userAdmin__: null,\n  __updateToken__: function __updateToken__() {\n    this.__userToken__ = sessionStorage.getItem('__userToken__');\n  },\n\n  /**\r\n  * Registers a user.\r\n  * \r\n  * @param {string} name \r\n  * @param {string} surname\r\n  * @param {string} surname\r\n  * @param {string} idCard\r\n  * @param {string} phone\r\n  * @param {string} adress\r\n  * @param {string} city \r\n  * @param {string} email \r\n  * @param {string} password \r\n  * @param {string} passwordConfirmation \r\n  */\n  registerUser: function registerUser(name, surname, idCard, phone, adress, city, email, password, passwordConfirmation) {\n    if (typeof name !== 'string') throw TypeError(name + ' is not a string');\n    if (!name.trim().length) throw Error('name cannot be empty');\n    if (typeof surname !== 'string') throw TypeError(surname + ' is not a string');\n    if (!surname.trim().length) throw Error('surname cannot be empty');\n    if (typeof idCard !== 'string') throw TypeError(idCard + ' is not a string');\n    if (!idCard.trim().length) throw Error('idCard cannot be empty');\n    if (typeof phone !== 'string') throw TypeError(phone + ' is not a string');\n    if (!phone.trim().length) throw Error('phone cannot be empty');\n    if (typeof adress !== 'string') throw TypeError(adress + ' is not a string');\n    if (!adress.trim().length) throw Error('adress cannot be empty');\n    if (typeof city !== 'string') throw TypeError(city + ' is not a string');\n    if (!city.trim().length) throw Error('city cannot be empty');\n    if (typeof email !== 'string') throw TypeError(email + ' is not a string');\n    if (!email.trim().length) throw Error('email cannot be empty');\n    if (typeof password !== 'string') throw TypeError(password + ' is not a string');\n    if (!password.trim().length) throw Error('password cannot be empty');\n    if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string');\n    if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty');\n    if (password !== passwordConfirmation) throw Error('passwords do not match');\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        surname: surname,\n        idCard: idCard,\n        phone: phone,\n        adress: adress,\n        city: city,\n        email: email,\n        password: password,\n        passwordConfirmation: passwordConfirmation\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (_ref) {\n      var message = _ref.message,\n          error = _ref.error;\n      if (error) throw Error(error);\n      return message;\n    });\n  },\n\n  /**\r\n  * Registers a owner's pet.\r\n  * \r\n  * @param {string} owner \r\n  * @param {string} name \r\n  * @param {string} specie\r\n  * @param {string} breed\r\n  * @param {string} color\r\n  * @param {string} gender\r\n  * @param {string} birthdate\r\n  * @param {string} microchip\r\n  * @param {string} petlicence\r\n  * @param {string} neutered\r\n  * @param {string} vaccionations\r\n  * @param {string} controls\r\n  * @param {string} details\r\n  */\n  registerPet: function registerPet(owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details) {\n    if (typeof owner !== 'string') throw TypeError(owner + ' is not a string');\n    if (!owner.trim().length) throw Error('owner cannot be empty');\n    if (typeof name !== 'string') throw TypeError(name + ' is not a string');\n    if (!name.trim().length) throw Error('name cannot be empty');\n    if (typeof specie !== 'string') throw TypeError(specie + ' is not a string');\n    if (!specie.trim().length) throw Error('specie cannot be empty');\n    if (typeof breed !== 'string') throw TypeError(breed + ' is not a string');\n    if (!breed.trim().length) throw Error('breed cannot be empty');\n    if (typeof color !== 'string') throw TypeError(color + ' is not a string');\n    if (!color.trim().length) throw Error('color cannot be empty');\n    if (typeof gender !== 'string') throw TypeError(gender + ' is not a string');\n    if (!gender.trim().length) throw Error('gender cannot be empty');\n    if (typeof birthdate != 'string') throw TypeError(birthdate + ' is not a string');\n    if (!birthdate.trim().length) throw Error('birthdate cannot be empty');\n    if (typeof microchip != 'string') throw TypeError(microchip + ' is not a string');\n    if (!microchip.trim().length) throw Error('microchip cannot be empty');\n    if (typeof petlicence != 'string') throw TypeError(petlicence + ' is not a string');\n    if (!petlicence.trim().length) throw Error('petlicence cannot be empty');\n    if (typeof vaccionations != 'string') throw TypeError(vaccionations + ' is not a string');\n    if (!vaccionations.trim().length) throw Error('vaccionations cannot be empty');\n    if (typeof neutered != 'string') throw TypeError(neutered + ' is not a string');\n    if (!neutered.trim().length) throw Error('neutered cannot be empty');\n    if (typeof controls != 'string') throw TypeError(controls + ' is not a string');\n    if (!controls.trim().length) throw Error('controls cannot be empty');\n    if (typeof details != 'string') throw TypeError(details + ' is not a string');\n    if (!details.trim().length) throw Error('details cannot be empty');\n    return fetch(\"\".concat(this.url, \"/pet\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        owner: owner,\n        name: name,\n        specie: specie,\n        breed: breed,\n        color: color,\n        gender: gender,\n        birthdate: birthdate,\n        microchip: microchip,\n        petlicence: petlicence,\n        neutered: neutered,\n        vaccionations: vaccionations,\n        controls: controls,\n        details: details\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (_ref2) {\n      var message = _ref2.message,\n          error = _ref2.error;\n      if (error) throw Error(error);\n      return message;\n    });\n  },\n\n  /**\r\n   * Logs in the user by its credentials.\r\n   * \r\n   * @param {string} email \r\n   * @param {string} password \r\n   */\n  logInUser: function logInUser(email, password) {\n    var _this = this;\n\n    if (typeof email !== 'string') throw TypeError(email + ' is not a string');\n    if (!email.trim().length) throw Error('email cannot be empty');\n    if (typeof password !== 'string') throw TypeError(password + ' is not a string');\n    if (!password.trim().length) throw Error('password cannot be empty');\n    return fetch(\"\".concat(this.url, \"/user/auth\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      _this.__userToken__ = response.token;\n      _this.__userAdmin__ = response.role === 'admin';\n      return response.token;\n    });\n  },\n\n  /**\r\n   * Checks user is logged in.\r\n   */\n  get isUserLoggedIn() {\n    return !!this.__userToken__;\n  },\n\n  /**\r\n   * Logs out the user.\r\n   */\n  logOutUser: function logOutUser() {\n    this.__userAdmin__ = null;\n    this.__userToken__ = null;\n    this.removeStorage();\n    window.location.reload();\n  },\n\n  /**\r\n   * Remove session storage\r\n   */\n  removeStorage: function removeStorage() {\n    sessionStorage.clear();\n  },\n\n  /**\r\n   * Check if the user logged is adnim\r\n   */\n  get isAdmin() {\n    return this.__userAdmin__ === 'true';\n  },\n\n  /**\r\n   * Retrieve all users registered\r\n   */\n  retrieveUsers: function retrieveUsers() {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/users\"), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve owner's appointments\r\n   */\n  retrieveAppointmentsOwner: function retrieveAppointmentsOwner() {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/appointmentsOwner\"), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      response.forEach(function (appointment) {\n        return appointment.date = new Date(appointment.date);\n      });\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve month's appointments\r\n   * \r\n   * @param {string} year \r\n   * @param {string} month \r\n   */\n  retrieveAppointments: function retrieveAppointments(year, month) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/appointments/\").concat(year, \"/\").concat(month), {\n      method: 'GET',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__),\n        'content-type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      response.forEach(function (appointment) {\n        return appointment.date = new Date(appointment.date);\n      });\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve pet's information\r\n   * \r\n   * @param {string} userId \r\n   */\n  retrievePets: function retrievePets(userId) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/pets/\").concat(userId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Assing appointments\r\n   * \r\n   * @param {string} owner \r\n   * @param {string} pet \r\n   * @param {string} date \r\n   */\n  assignAppointment: function assignAppointment(owner, pet, date) {\n    if (typeof owner !== 'string') throw TypeError(owner + ' is not a string');\n    if (!owner.trim().length) throw Error('owner cannot be empty');\n    if (typeof pet !== 'string') throw TypeError(pet + ' is not a string');\n    if (!pet.trim().length) throw Error('pet cannot be empty');\n    if (typeof date !== 'string') throw TypeError(date + ' is not a string');\n\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/appointment\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        owner: owner,\n        pet: pet,\n        date: date\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(\"Please, select date higher than today and a correct hour. Check if the date has been assigned\");\n      return response;\n    });\n  },\n\n  /**\r\n   * Delete appointment\r\n   * \r\n   * @param {string} Id \r\n   */\n  deleteAppointment: function deleteAppointment(Id) {\n    if (typeof Id !== 'string') throw TypeError(Id + ' is not a string');\n    if (!Id.trim().length) throw Error('Id cannot be empty');\n\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/appointment\"), {\n      method: 'DELETE',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        Id: Id\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * \r\n   * Retrieve all users\r\n   */\n  retrieveUser: function retrieveUser() {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/user/\"), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve user's information\r\n   * \r\n   * @param {string} userSelectedId \r\n   */\n  retrieveUserSelected: function retrieveUserSelected(userSelectedId) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/user/\").concat(userSelectedId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve pet's information\r\n   * \r\n   * @param {string} petsId \r\n   */\n  retrievePet: function retrievePet(petsId) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/pet/\").concat(petsId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Retrieve appointment information depending on user logged\r\n   * \r\n   * @param {string} petsId \r\n   */\n  retrievePetVisit: function retrievePetVisit(petsId) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/visit/\").concat(petsId), {\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Update user's information\r\n   * \r\n   * @param {string} name \r\n   * @param {string} surname \r\n   * @param {string} idCard \r\n   * @param {string} phone \r\n   * @param {string} adress \r\n   * @param {string} city \r\n   * @param {string} email \r\n   */\n  updateUser: function updateUser(name, surname, idCard, phone, adress, city, email) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        surname: surname,\n        idCard: idCard,\n        phone: phone,\n        adress: adress,\n        city: city,\n        email: email\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Update pet's information\r\n   * \r\n   * @param {string} petsId \r\n   * @param {string} name \r\n   * @param {string} microchip \r\n   * @param {sgring} petlicence \r\n   */\n  updatePet: function updatePet(petsId, name, microchip, petlicence) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/pet\"), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        petsId: petsId,\n        name: name,\n        microchip: microchip,\n        petlicence: petlicence\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n\n  /**\r\n   * Update visit's information\r\n   * \r\n   * @param {string} petsId \r\n   * @param {string} vaccionations \r\n   * @param {string} controls \r\n   * @param {string} details \r\n   */\n  updateVisit: function updateVisit(petsId, vaccionations, controls, details) {\n    this.__updateToken__();\n\n    return fetch(\"\".concat(this.url, \"/visit\"), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(this.__userToken__),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        petsId: petsId,\n        vaccionations: vaccionations,\n        controls: controls,\n        details: details\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  }\n};\nexport default logic;","map":{"version":3,"sources":["C:\\Users\\lluna\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\clara-rufi\\st-james-vet\\st-james-vet-app\\src\\logic\\index.js"],"names":["logic","url","__userToken__","__userAdmin__","__updateToken__","sessionStorage","getItem","registerUser","name","surname","idCard","phone","adress","city","email","password","passwordConfirmation","TypeError","trim","length","Error","fetch","method","headers","body","JSON","stringify","then","response","json","message","error","registerPet","owner","specie","breed","color","gender","birthdate","microchip","petlicence","neutered","vaccionations","controls","details","logInUser","token","role","isUserLoggedIn","logOutUser","removeStorage","window","location","reload","clear","isAdmin","retrieveUsers","authorization","retrieveAppointmentsOwner","forEach","appointment","date","Date","retrieveAppointments","year","month","retrievePets","userId","assignAppointment","pet","deleteAppointment","Id","retrieveUser","retrieveUserSelected","userSelectedId","retrievePet","petsId","retrievePetVisit","updateUser","updatePet","updateVisit"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\n\r\n/**\r\n * Abstraction of business logic.\r\n */\r\nconst logic = {\r\n    url: null,\r\n    __userToken__: null,\r\n    __userAdmin__: null,\r\n    __updateToken__() {\r\n        this.__userToken__ = sessionStorage.getItem('__userToken__')\r\n    },\r\n\r\n    /**\r\n    * Registers a user.\r\n    * \r\n    * @param {string} name \r\n    * @param {string} surname\r\n    * @param {string} surname\r\n    * @param {string} idCard\r\n    * @param {string} phone\r\n    * @param {string} adress\r\n    * @param {string} city \r\n    * @param {string} email \r\n    * @param {string} password \r\n    * @param {string} passwordConfirmation \r\n    */\r\n    registerUser(name, surname, idCard, phone, adress, city, email, password, passwordConfirmation) {\r\n        if (typeof name !== 'string') throw TypeError(name + ' is not a string')\r\n\r\n        if (!name.trim().length) throw Error('name cannot be empty')\r\n\r\n        if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')\r\n\r\n        if (!surname.trim().length) throw Error('surname cannot be empty')\r\n\r\n        if (typeof idCard !== 'string') throw TypeError(idCard + ' is not a string')\r\n\r\n        if (!idCard.trim().length) throw Error('idCard cannot be empty')\r\n\r\n        if (typeof phone !== 'string') throw TypeError(phone + ' is not a string')\r\n\r\n        if (!phone.trim().length) throw Error('phone cannot be empty')\r\n\r\n        if (typeof adress !== 'string') throw TypeError(adress + ' is not a string')\r\n\r\n        if (!adress.trim().length) throw Error('adress cannot be empty')\r\n\r\n        if (typeof city !== 'string') throw TypeError(city + ' is not a string')\r\n\r\n        if (!city.trim().length) throw Error('city cannot be empty')\r\n\r\n        if (typeof email !== 'string') throw TypeError(email + ' is not a string')\r\n\r\n        if (!email.trim().length) throw Error('email cannot be empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(password + ' is not a string')\r\n\r\n        if (!password.trim().length) throw Error('password cannot be empty')\r\n\r\n        if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')\r\n\r\n        if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')\r\n\r\n        if (password !== passwordConfirmation) throw Error('passwords do not match')\r\n\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n\r\n            body: JSON.stringify({ name, surname, idCard, phone, adress, city, email, password, passwordConfirmation })\r\n        })\r\n            .then(response => response.json())\r\n            .then(({ message, error }) => {\r\n                if (error) throw Error(error)\r\n\r\n                return message\r\n            })\r\n    },\r\n\r\n    /**\r\n    * Registers a owner's pet.\r\n    * \r\n    * @param {string} owner \r\n    * @param {string} name \r\n    * @param {string} specie\r\n    * @param {string} breed\r\n    * @param {string} color\r\n    * @param {string} gender\r\n    * @param {string} birthdate\r\n    * @param {string} microchip\r\n    * @param {string} petlicence\r\n    * @param {string} neutered\r\n    * @param {string} vaccionations\r\n    * @param {string} controls\r\n    * @param {string} details\r\n    */\r\n    registerPet(owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details) {\r\n\r\n        if (typeof owner !== 'string') throw TypeError(owner + ' is not a string')\r\n\r\n        if (!owner.trim().length) throw Error('owner cannot be empty')\r\n\r\n        if (typeof name !== 'string') throw TypeError(name + ' is not a string')\r\n\r\n        if (!name.trim().length) throw Error('name cannot be empty')\r\n\r\n        if (typeof specie !== 'string') throw TypeError(specie + ' is not a string')\r\n\r\n        if (!specie.trim().length) throw Error('specie cannot be empty')\r\n\r\n        if (typeof breed !== 'string') throw TypeError(breed + ' is not a string')\r\n\r\n        if (!breed.trim().length) throw Error('breed cannot be empty')\r\n\r\n        if (typeof color !== 'string') throw TypeError(color + ' is not a string')\r\n\r\n        if (!color.trim().length) throw Error('color cannot be empty')\r\n\r\n        if (typeof gender !== 'string') throw TypeError(gender + ' is not a string')\r\n\r\n        if (!gender.trim().length) throw Error('gender cannot be empty')\r\n\r\n        if (typeof birthdate != 'string') throw TypeError(birthdate + ' is not a string')\r\n\r\n        if (!birthdate.trim().length) throw Error('birthdate cannot be empty')\r\n\r\n        if (typeof microchip != 'string') throw TypeError(microchip + ' is not a string')\r\n\r\n        if (!microchip.trim().length) throw Error('microchip cannot be empty')\r\n\r\n        if (typeof petlicence != 'string') throw TypeError(petlicence + ' is not a string')\r\n\r\n        if (!petlicence.trim().length) throw Error('petlicence cannot be empty')\r\n\r\n        if (typeof vaccionations != 'string') throw TypeError(vaccionations + ' is not a string')\r\n\r\n        if (!vaccionations.trim().length) throw Error('vaccionations cannot be empty')\r\n\r\n        if (typeof neutered != 'string') throw TypeError(neutered + ' is not a string')\r\n\r\n        if (!neutered.trim().length) throw Error('neutered cannot be empty')\r\n\r\n        if (typeof controls != 'string') throw TypeError(controls + ' is not a string')\r\n\r\n        if (!controls.trim().length) throw Error('controls cannot be empty')\r\n\r\n        if (typeof details != 'string') throw TypeError(details + ' is not a string')\r\n\r\n        if (!details.trim().length) throw Error('details cannot be empty')\r\n\r\n        return fetch(`${this.url}/pet`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ owner, name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details })\r\n        })\r\n            .then(response => response.json())\r\n            .then(({ message, error }) => {\r\n                if (error) throw Error(error)\r\n\r\n                return message\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Logs in the user by its credentials.\r\n     * \r\n     * @param {string} email \r\n     * @param {string} password \r\n     */\r\n    logInUser(email, password) {\r\n        if (typeof email !== 'string') throw TypeError(email + ' is not a string')\r\n\r\n        if (!email.trim().length) throw Error('email cannot be empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(password + ' is not a string')\r\n\r\n        if (!password.trim().length) throw Error('password cannot be empty')\r\n\r\n        return fetch(`${this.url}/user/auth`, {\r\n\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ email, password })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                this.__userToken__ = response.token\r\n                this.__userAdmin__ = (response.role === 'admin')\r\n                return response.token\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Checks user is logged in.\r\n     */\r\n    get isUserLoggedIn() {\r\n        return !!this.__userToken__\r\n    },\r\n\r\n    /**\r\n     * Logs out the user.\r\n     */\r\n    logOutUser() {\r\n        this.__userAdmin__ = null\r\n        this.__userToken__ = null\r\n        this.removeStorage()\r\n        window.location.reload()\r\n    },\r\n\r\n    /**\r\n     * Remove session storage\r\n     */\r\n    removeStorage() {\r\n        sessionStorage.clear()\r\n    },\r\n\r\n    /**\r\n     * Check if the user logged is adnim\r\n     */\r\n    get isAdmin() {\r\n        return this.__userAdmin__ === 'true'\r\n    },\r\n\r\n    /**\r\n     * Retrieve all users registered\r\n     */\r\n    retrieveUsers() {\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/users`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Retrieve owner's appointments\r\n     */\r\n    retrieveAppointmentsOwner() {\r\n       \r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/appointmentsOwner`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                response.forEach(appointment => appointment.date = new Date(appointment.date))\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Retrieve month's appointments\r\n     * \r\n     * @param {string} year \r\n     * @param {string} month \r\n     */\r\n    retrieveAppointments(year, month) {\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/appointments/${year}/${month}`, {\r\n\r\n            method: 'GET',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                response.forEach(appointment => appointment.date = new Date(appointment.date))\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Retrieve pet's information\r\n     * \r\n     * @param {string} userId \r\n     */\r\n    retrievePets(userId) {\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/pets/${userId}`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Assing appointments\r\n     * \r\n     * @param {string} owner \r\n     * @param {string} pet \r\n     * @param {string} date \r\n     */\r\n    assignAppointment(owner, pet, date) {\r\n        if (typeof owner !== 'string') throw TypeError(owner + ' is not a string')\r\n\r\n        if (!owner.trim().length) throw Error('owner cannot be empty')\r\n\r\n        if (typeof pet !== 'string') throw TypeError(pet + ' is not a string')\r\n\r\n        if (!pet.trim().length) throw Error('pet cannot be empty')\r\n\r\n        if (typeof date !== 'string') throw TypeError(date + ' is not a string')\r\n\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/appointment`, {\r\n            method: 'POST',\r\n            headers: {\r\n\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ owner, pet, date })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(\"Please, select date higher than today and a correct hour. Check if the date has been assigned\")\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Delete appointment\r\n     * \r\n     * @param {string} Id \r\n     */\r\n    deleteAppointment(Id) {\r\n\r\n        if (typeof Id !== 'string') throw TypeError(Id + ' is not a string')\r\n\r\n        if (!Id.trim().length) throw Error('Id cannot be empty')\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/appointment`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ Id })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * \r\n     * Retrieve all users\r\n     */\r\n    retrieveUser() {\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/user/`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Retrieve user's information\r\n     * \r\n     * @param {string} userSelectedId \r\n     */\r\n    retrieveUserSelected(userSelectedId) {\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/user/${userSelectedId}`, {\r\n\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Retrieve pet's information\r\n     * \r\n     * @param {string} petsId \r\n     */\r\n    retrievePet(petsId) {\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/pet/${petsId}`, {\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Retrieve appointment information depending on user logged\r\n     * \r\n     * @param {string} petsId \r\n     */\r\n    retrievePetVisit(petsId) {\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/visit/${petsId}`, {\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Update user's information\r\n     * \r\n     * @param {string} name \r\n     * @param {string} surname \r\n     * @param {string} idCard \r\n     * @param {string} phone \r\n     * @param {string} adress \r\n     * @param {string} city \r\n     * @param {string} email \r\n     */\r\n    updateUser(name, surname, idCard, phone, adress, city, email) {\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ name, surname, idCard, phone, adress, city, email })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n\r\n    /**\r\n     * Update pet's information\r\n     * \r\n     * @param {string} petsId \r\n     * @param {string} name \r\n     * @param {string} microchip \r\n     * @param {sgring} petlicence \r\n     */\r\n    updatePet(petsId, name, microchip, petlicence) {\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/pet`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ petsId, name, microchip, petlicence })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Update visit's information\r\n     * \r\n     * @param {string} petsId \r\n     * @param {string} vaccionations \r\n     * @param {string} controls \r\n     * @param {string} details \r\n     */\r\n    updateVisit(petsId, vaccionations, controls, details) {\r\n\r\n        this.__updateToken__()\r\n        return fetch(`${this.url}/visit`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${this.__userToken__}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ petsId, vaccionations, controls, details })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport default logic"]},"metadata":{},"sourceType":"module"}