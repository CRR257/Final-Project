{"ast":null,"code":"'use strict';\n/**\r\n * Abstraction of business logic.\r\n */\n\nvar logic = {\n  url: 'http://localhost:8000/api',\n  __userId__: null,\n  __userApiToken__: null,\n\n  /**\r\n  * Registers a user.\r\n  * \r\n  * @param {string} name \r\n  * @param {string} surname \r\n  * @param {string} email \r\n  * @param {string} password \r\n  * @param {string} passwordConfirmation \r\n  */\n  registerUser: function registerUser(name, surname, id, phone, adress, city, email, password, passwordConfirmation) {\n    if (typeof name !== 'string') throw TypeError(name + ' is not a string');\n    if (!name.trim().length) throw Error('name cannot be empty');\n    if (typeof surname !== 'string') throw TypeError(surname + ' is not a string');\n    if (!surname.trim().length) throw Error('surname cannot be empty');\n    if (typeof id !== 'string') throw TypeError(id + ' is not a string');\n    if (!id.trim().length) throw Error('id cannot be empty');\n    if (typeof phone !== 'string') throw TypeError(phone + ' is not a string');\n    if (!phone.trim().length) throw Error('phone cannot be empty');\n    if (typeof adress !== 'string') throw TypeError(adress + 'is not a string');\n    if (!adress.trim().length) throw Error('adress cannot be empty');\n    if (typeof city !== 'string') throw TypeError(city + 'is not a string');\n    if (!city.trim().length) throw Error('city cannot be empty');\n    if (typeof email !== 'string') throw TypeError(email + ' is not a string');\n    if (!email.trim().length) throw Error('email cannot be empty');\n    if (typeof password !== 'string') throw TypeError(password + ' is not a string');\n    if (!password.trim().length) throw Error('password cannot be empty');\n    if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string');\n    if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty');\n    if (password !== passwordConfirmation) throw Error('passwords do not match');\n    console.log(name, surname, id, phone, adress, city, email, password, passwordConfirmation);\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        surname: surname,\n        id: id,\n        phone: phone,\n        adress: adress,\n        city: city,\n        email: email,\n        password: password,\n        passwordConfirmation: passwordConfirmation\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (_ref) {\n      var id = _ref.id,\n          error = _ref.error;\n      if (error) throw Error(error);\n      return id;\n    });\n  },\n  registerPet: function registerPet(name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details) {\n    if (typeof name !== 'string') throw TypeError(name + ' is not a string');\n    if (!name.trim().length) throw Error('name cannot be empty');\n    if (typeof specie !== 'string') throw TypeError(specie + ' is not a string');\n    if (!specie.trim().length) throw Error('specie cannot be empty');\n    if (typeof breed !== 'string') throw TypeError(breed + ' is not a string');\n    if (!breed.trim().length) throw Error('breed cannot be empty');\n    if (typeof color !== 'string') throw TypeError(color + ' is not a string');\n    if (!color.trim().length) throw Error('color cannot be empty');\n    if (typeof gender !== 'string') throw TypeError(gender + ' is not a string');\n    if (!gender.trim().length) throw Error('gender cannot be empty');\n    if (typeof birthdate != 'string') throw TypeError(birthdate + 'is not a string');\n    if (!birthdate.trim().length) throw Error('birthdate cannot be empty');\n    if (typeof microchip != 'string') throw TypeError(microchip + 'is not a string');\n    if (!microchip.trim().length) throw Error('microchip cannot be empty');\n    if (typeof petlicence != 'string') throw TypeError(petlicence + 'is not a string');\n    if (!microchip.trim().length) throw Error('microchip cannot be empty');\n    if (typeof neutered != 'string') throw TypeError(neutered + 'is not a string');\n    if (!neutered.trim().length) throw Error('neutered cannot be empty');\n    if (typeof vaccionations != 'string') throw TypeError(vaccionations + 'is not a string'); // if (!vaccionations.trim().length) throw Error ('vaccionations cannot be empty')\n\n    if (typeof controls != 'string') throw TypeError(controls + 'is not a string'); // if (!controls.trim().length) throw Error ('controls cannot be empty')\n\n    if (typeof details != 'string') throw TypeError(details + 'is not a string'); // if (!details.trim().length) throw Error ('details cannot be empty')\n\n    console.log(name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details);\n    return fetch(\"\".concat(this.url, \"/pet\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        specie: specie,\n        breed: breed,\n        color: color,\n        gender: gender,\n        birthdate: birthdate,\n        microchip: microchip,\n        petlicence: petlicence,\n        neutered: neutered,\n        vaccionations: vaccionations,\n        controls: controls,\n        details: details\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      debugger;\n      if (status === 'OK') return response.data.id;\n      throw Error(response.error);\n    });\n  },\n\n  /**\r\n   * Logs in the user by its credentials.\r\n   * \r\n   * @param {string} email \r\n   * @param {string} password \r\n   */\n  logInUser: function logInUser(email, password) {\n    if (typeof email !== 'string') throw TypeError(email + ' is not a string');\n    if (!email.trim().length) throw Error('email cannot be empty');\n    if (typeof password !== 'string') throw TypeError(password + ' is not a string');\n    if (!password.trim().length) throw Error('password cannot be empty');\n    return fetch(\"\".concat(this.url, \"/user/auth\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response.token;\n    });\n  },\n\n  /**\r\n   * Checks user is logged in.\r\n   */\n  get isUserLoggedIn() {\n    return !!this.__userId__;\n  },\n\n  /**\r\n   * Logs out the user.\r\n   */\n  logOutUser: function logOutUser() {\n    this.__userId__ = null;\n    this.__userApiToken__ = null;\n  },\n  retrieveUser: function retrieveUser(token) {\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    if (!token.trim().length) throw Error('token is empty');\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      headers: {\n        authorization: \"Bearer \".concat(token)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  updateUser: function updateUser(token, data) {\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    if (!token.trim().length) throw Error('token is empty');\n    if (data.constructor !== Object) throw TypeError(\"\".concat(data, \" is not an object\"));\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  },\n  removeUser: function removeUser(token, email, password) {\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    if (!token.trim().length) throw Error('token is empty');\n    if (typeof email !== 'string') throw TypeError(\"\".concat(email, \" is not a string\"));\n    if (!email.trim().length) throw Error('email is empty');\n    if (typeof password !== 'string') throw TypeError(\"\".concat(password, \" is not a string\"));\n    if (!password.trim().length) throw Error('password is empty');\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'DELETE',\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.error) throw Error(response.error);\n      return response;\n    });\n  }\n};\nexport default logic;","map":{"version":3,"sources":["C:\\Users\\lluna\\bootcamp\\collab\\skylab-bootcamp-201901\\staff\\clara-rufi\\final_project\\client\\src\\logic\\index.js"],"names":["logic","url","__userId__","__userApiToken__","registerUser","name","surname","id","phone","adress","city","email","password","passwordConfirmation","TypeError","trim","length","Error","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","error","registerPet","specie","breed","color","gender","birthdate","microchip","petlicence","neutered","vaccionations","controls","details","status","data","logInUser","token","isUserLoggedIn","logOutUser","retrieveUser","authorization","updateUser","constructor","Object","removeUser"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\n\r\n/**\r\n * Abstraction of business logic.\r\n */\r\nconst logic = {\r\n    url: 'http://localhost:8000/api',\r\n    __userId__: null,\r\n    __userApiToken__: null,\r\n\r\n    /**\r\n    * Registers a user.\r\n    * \r\n    * @param {string} name \r\n    * @param {string} surname \r\n    * @param {string} email \r\n    * @param {string} password \r\n    * @param {string} passwordConfirmation \r\n    */\r\n    registerUser(name, surname, id, phone, adress, city, email, password, passwordConfirmation) {\r\n        if (typeof name !== 'string') throw TypeError(name + ' is not a string')\r\n\r\n        if (!name.trim().length) throw Error('name cannot be empty')\r\n\r\n        if (typeof surname !== 'string') throw TypeError(surname + ' is not a string')\r\n\r\n        if (!surname.trim().length) throw Error('surname cannot be empty')\r\n\r\n        if (typeof id !== 'string') throw TypeError(id + ' is not a string')\r\n\r\n        if (!id.trim().length) throw Error('id cannot be empty')\r\n\r\n        if(typeof phone !== 'string') throw TypeError (phone + ' is not a string')\r\n\r\n        if (!phone.trim().length) throw Error ('phone cannot be empty')\r\n\r\n        if(typeof adress !== 'string') throw TypeError (adress + 'is not a string')\r\n\r\n        if (!adress.trim().length) throw Error ('adress cannot be empty')\r\n\r\n        if(typeof city !== 'string') throw TypeError (city + 'is not a string')\r\n\r\n        if (!city.trim().length) throw Error ('city cannot be empty')\r\n\r\n        if (typeof email !== 'string') throw TypeError(email + ' is not a string')\r\n\r\n        if (!email.trim().length) throw Error('email cannot be empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(password + ' is not a string')\r\n\r\n        if (!password.trim().length) throw Error('password cannot be empty')\r\n\r\n        if (typeof passwordConfirmation !== 'string') throw TypeError(passwordConfirmation + ' is not a string')\r\n\r\n        if (!passwordConfirmation.trim().length) throw Error('password confirmation cannot be empty')\r\n\r\n        if (password !== passwordConfirmation) throw Error('passwords do not match')\r\n\r\n        console.log(name, surname, id, phone, adress, city, email, password, passwordConfirmation)\r\n\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            \r\n            body: JSON.stringify({ name, surname, id, phone, adress, city, email, password, passwordConfirmation })\r\n        })\r\n            .then(response => response.json())\r\n            .then(({ id, error }) => {\r\n                if (error) throw Error(error)\r\n\r\n                return id\r\n            })\r\n    },\r\n\r\n    registerPet(name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details) {\r\n        if (typeof name !== 'string') throw TypeError(name + ' is not a string')\r\n\r\n        if (!name.trim().length) throw Error('name cannot be empty')\r\n\r\n        if (typeof specie !== 'string') throw TypeError(specie + ' is not a string')\r\n\r\n        if (!specie.trim().length) throw Error('specie cannot be empty')\r\n\r\n        if (typeof breed !== 'string') throw TypeError(breed + ' is not a string')\r\n\r\n        if (!breed.trim().length) throw Error('breed cannot be empty')\r\n\r\n        if (typeof color !== 'string') throw TypeError(color + ' is not a string')\r\n\r\n        if (!color.trim().length) throw Error('color cannot be empty')\r\n\r\n        if (typeof gender !== 'string') throw TypeError(gender + ' is not a string')\r\n\r\n        if (!gender.trim().length) throw Error('gender cannot be empty')\r\n\r\n        if(typeof birthdate != 'string') throw TypeError (birthdate + 'is not a string')\r\n\r\n        if (!birthdate.trim().length) throw Error ('birthdate cannot be empty')\r\n\r\n        if(typeof microchip != 'string') throw TypeError (microchip + 'is not a string')\r\n\r\n        if (!microchip.trim().length) throw Error ('microchip cannot be empty')\r\n\r\n        if(typeof petlicence != 'string') throw TypeError (petlicence + 'is not a string')\r\n\r\n        if (!microchip.trim().length) throw Error ('microchip cannot be empty')\r\n\r\n        if(typeof neutered != 'string') throw TypeError (neutered + 'is not a string')\r\n\r\n        if (!neutered.trim().length) throw Error ('neutered cannot be empty')\r\n\r\n        if(typeof vaccionations != 'string') throw TypeError (vaccionations + 'is not a string')\r\n\r\n        // if (!vaccionations.trim().length) throw Error ('vaccionations cannot be empty')\r\n\r\n        if(typeof controls != 'string') throw TypeError (controls + 'is not a string')\r\n\r\n        // if (!controls.trim().length) throw Error ('controls cannot be empty')\r\n\r\n        if(typeof details != 'string') throw TypeError (details + 'is not a string')\r\n\r\n        // if (!details.trim().length) throw Error ('details cannot be empty')\r\n\r\n        console.log(name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details)\r\n       \r\n        return fetch(`${this.url}/pet`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ name, specie, breed, color, gender, birthdate, microchip, petlicence, neutered, vaccionations, controls, details})\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { status } = response\r\n                debugger\r\n                if (status === 'OK') return response.data.id\r\n\r\n                throw Error(response.error)\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Logs in the user by its credentials.\r\n     * \r\n     * @param {string} email \r\n     * @param {string} password \r\n     */\r\n    logInUser(email, password) {\r\n        if (typeof email !== 'string') throw TypeError(email + ' is not a string')\r\n\r\n        if (!email.trim().length) throw Error('email cannot be empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(password + ' is not a string')\r\n\r\n        if (!password.trim().length) throw Error('password cannot be empty')\r\n\r\n\r\n        return fetch(`${this.url}/user/auth`, {\r\n           \r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ email, password })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response.token\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Checks user is logged in.\r\n     */\r\n    get isUserLoggedIn() {\r\n        return !!this.__userId__\r\n    },\r\n\r\n    /**\r\n     * Logs out the user.\r\n     */\r\n    logOutUser() {\r\n        this.__userId__ = null\r\n        this.__userApiToken__ = null\r\n    },\r\n\r\n    retrieveUser(token) {\r\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        if (!token.trim().length) throw Error('token is empty')\r\n\r\n        return fetch(`${this.url}/user`, {\r\n            headers: {\r\n                authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    updateUser(token, data) {\r\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        if (!token.trim().length) throw Error('token is empty')\r\n\r\n        if (data.constructor !== Object) throw TypeError(`${data} is not an object`)\r\n\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `Bearer ${token}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n    removeUser(token, email, password) {\r\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\r\n        if (!token.trim().length) throw Error('token is empty')\r\n\r\n        if (typeof email !== 'string') throw TypeError(`${email} is not a string`)\r\n        if (!email.trim().length) throw Error('email is empty')\r\n\r\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\r\n        if (!password.trim().length) throw Error('password is empty')\r\n\r\n        return fetch(`${this.url}/user`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: `Bearer ${token}`,\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ email, password })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.error) throw Error(response.error)\r\n\r\n                return response\r\n            })\r\n    },\r\n\r\n}\r\n\r\nexport default logic"]},"metadata":{},"sourceType":"module"}